[{"/Users/jay/Desktop/Current Projects/social-songs/web/src/redux/store.ts":"1","/Users/jay/Desktop/Current Projects/social-songs/web/src/redux/reducers/index.ts":"2","/Users/jay/Desktop/Current Projects/social-songs/web/src/routes/mates/Mates.tsx":"3","/Users/jay/Desktop/Current Projects/social-songs/web/src/routes/notFound/NotFound.tsx":"4","/Users/jay/Desktop/Current Projects/social-songs/web/src/routes/searchResult/SearchResult.tsx":"5","/Users/jay/Desktop/Current Projects/social-songs/web/src/components/playbar/Playbar.tsx":"6","/Users/jay/Desktop/Current Projects/social-songs/web/src/components/post/CreatePost.tsx":"7","/Users/jay/Desktop/Current Projects/social-songs/web/src/components/header/Header.tsx":"8","/Users/jay/Desktop/Current Projects/social-songs/web/src/redux/reducers/posts/reducers.ts":"9","/Users/jay/Desktop/Current Projects/social-songs/web/src/redux/reducers/workspace/reducers.ts":"10","/Users/jay/Desktop/Current Projects/social-songs/web/src/redux/reducers/playbar/reducers.ts":"11","/Users/jay/Desktop/Current Projects/social-songs/web/src/components/create/CreateComponent.tsx":"12","/Users/jay/Desktop/Current Projects/social-songs/web/src/graphql/mutations.ts":"13","/Users/jay/Desktop/Current Projects/social-songs/web/src/components/navigation/DropDown.tsx":"14","/Users/jay/Desktop/Current Projects/social-songs/web/src/components/post/DiscoverPost.tsx":"15","/Users/jay/Desktop/Current Projects/social-songs/web/src/components/post/MyPosts.tsx":"16","/Users/jay/Desktop/Current Projects/social-songs/web/src/routes/workspace/lyrics/LyricsViewOnly.tsx":"17","/Users/jay/Desktop/Current Projects/social-songs/web/src/redux/actions/profile/types.ts":"18","/Users/jay/Desktop/Current Projects/social-songs/web/src/routes/profile/edit/Instruments.tsx":"19","/Users/jay/Desktop/Current Projects/social-songs/web/src/redux/actions/application/types.ts":"20","/Users/jay/Desktop/Current Projects/social-songs/web/src/components/post/Comment.tsx":"21","/Users/jay/Desktop/Current Projects/social-songs/web/src/routes/workspace/tabs/CreateTabs.tsx":"22","/Users/jay/Desktop/Current Projects/social-songs/web/src/routes/login-register/Login.tsx":"23","/Users/jay/Desktop/Current Projects/social-songs/web/src/routes/profile/edit/Bio.tsx":"24","/Users/jay/Desktop/Current Projects/social-songs/web/src/routes/workspace/tracks/TracksViewOnly.tsx":"25","/Users/jay/Desktop/Current Projects/social-songs/web/src/routes/workspace/tabs/Tabs.tsx":"26","/Users/jay/Desktop/Current Projects/social-songs/web/src/redux/actions/project/types.ts":"27","/Users/jay/Desktop/Current Projects/social-songs/web/src/redux/actions/workspace/types.ts":"28","/Users/jay/Desktop/Current Projects/social-songs/web/src/components/post/DeletePost.tsx":"29","/Users/jay/Desktop/Current Projects/social-songs/web/src/routes/workspace/DeleteWSItem.tsx":"30","/Users/jay/Desktop/Current Projects/social-songs/web/src/routes/login-register/Register.tsx":"31","/Users/jay/Desktop/Current Projects/social-songs/web/src/routes/workspace/tracks/Tracks.tsx":"32","/Users/jay/Desktop/Current Projects/social-songs/web/src/graphql/queries.ts":"33","/Users/jay/Desktop/Current Projects/social-songs/web/src/components/header/AccountOptions.tsx":"34","/Users/jay/Desktop/Current Projects/social-songs/web/src/routes/workspace/tabs/TabsViewOnly.tsx":"35","/Users/jay/Desktop/Current Projects/social-songs/web/src/components/formatTime/FormatTimestamp.tsx":"36","/Users/jay/Desktop/Current Projects/social-songs/web/src/routes/workspace/lyrics/Lyrics.tsx":"37","/Users/jay/Desktop/Current Projects/social-songs/web/src/routes/workspace/tracks/Recording.tsx":"38","/Users/jay/Desktop/Current Projects/social-songs/web/src/routes/workspace/Workspace.tsx":"39","/Users/jay/Desktop/Current Projects/social-songs/web/src/routes/workspace/lyrics/CreatLyrics.tsx":"40","/Users/jay/Desktop/Current Projects/social-songs/web/src/index.tsx":"41","/Users/jay/Desktop/Current Projects/social-songs/web/src/App.tsx":"42","/Users/jay/Desktop/Current Projects/social-songs/web/src/Routes.tsx":"43","/Users/jay/Desktop/Current Projects/social-songs/web/src/routes/profile/Profile.tsx":"44","/Users/jay/Desktop/Current Projects/social-songs/web/src/routes/discover/Discover.tsx":"45","/Users/jay/Desktop/Current Projects/social-songs/web/src/components/scrollToTop/ScrollToTop.tsx":"46","/Users/jay/Desktop/Current Projects/social-songs/web/src/components/unAuthRedirect/UnAuthRedirect.tsx":"47","/Users/jay/Desktop/Current Projects/social-songs/web/src/redux/reducers/profile/reducers.ts":"48","/Users/jay/Desktop/Current Projects/social-songs/web/src/redux/reducers/application/reducers.ts":"49","/Users/jay/Desktop/Current Projects/social-songs/web/src/redux/reducers/user/reducers.ts":"50","/Users/jay/Desktop/Current Projects/social-songs/web/src/components/post/UserPosts.tsx":"51","/Users/jay/Desktop/Current Projects/social-songs/web/src/components/mates/MatesSearch.tsx":"52","/Users/jay/Desktop/Current Projects/social-songs/web/src/redux/actions/user/types.ts":"53","/Users/jay/Desktop/Current Projects/social-songs/web/src/routes/projects/Projects.tsx":"54","/Users/jay/Desktop/Current Projects/social-songs/web/src/components/profile/UserProfile.tsx":"55","/Users/jay/Desktop/Current Projects/social-songs/web/src/redux/reducers/project/reducers.ts":"56","/Users/jay/Desktop/Current Projects/social-songs/web/src/components/header/Search.tsx":"57","/Users/jay/Desktop/Current Projects/social-songs/web/src/components/post/FeedPosts.tsx":"58","/Users/jay/Desktop/Current Projects/social-songs/web/src/redux/actions/playbar/types.ts":"59","/Users/jay/Desktop/Current Projects/social-songs/web/src/components/navigation/Navigation.tsx":"60","/Users/jay/Desktop/Current Projects/social-songs/web/src/components/mates/MatesComponent.tsx":"61","/Users/jay/Desktop/Current Projects/social-songs/web/src/redux/actions/posts/types.ts":"62","/Users/jay/Desktop/Current Projects/social-songs/web/src/routes/feed/Feed.tsx":"63","/Users/jay/Desktop/Current Projects/social-songs/web/src/routes/profile/edit/NameDob.tsx":"64","/Users/jay/Desktop/Current Projects/social-songs/web/src/routes/landing/Landing.tsx":"65","/Users/jay/Desktop/Current Projects/social-songs/web/src/components/notifications/Notifications.tsx":"66","/Users/jay/Desktop/Current Projects/social-songs/web/src/components/project/contributors/RemoveContributor.tsx":"67","/Users/jay/Desktop/Current Projects/social-songs/web/src/components/project/components/SearchProjects.tsx":"68","/Users/jay/Desktop/Current Projects/social-songs/web/src/components/project/components/Options.tsx":"69","/Users/jay/Desktop/Current Projects/social-songs/web/src/components/project/functions/CreateProject.tsx":"70","/Users/jay/Desktop/Current Projects/social-songs/web/src/components/project/projects/MyProjects.tsx":"71","/Users/jay/Desktop/Current Projects/social-songs/web/src/components/project/components/ResultComponent.tsx":"72","/Users/jay/Desktop/Current Projects/social-songs/web/src/components/project/contributors/ContributorPanel.tsx":"73","/Users/jay/Desktop/Current Projects/social-songs/web/src/components/project/components/ProjectsHeader.tsx":"74","/Users/jay/Desktop/Current Projects/social-songs/web/src/components/project/contributors/ContributorAvatar.tsx":"75","/Users/jay/Desktop/Current Projects/social-songs/web/src/components/header/CreateOptions.tsx":"76"},{"size":572,"mtime":1610533963335,"results":"77","hashOfConfig":"78"},{"size":635,"mtime":1611495307099,"results":"79","hashOfConfig":"78"},{"size":776,"mtime":1613471334087,"results":"80","hashOfConfig":"78"},{"size":208,"mtime":1610382551121,"results":"81","hashOfConfig":"78"},{"size":3104,"mtime":1613733020013,"results":"82","hashOfConfig":"78"},{"size":3599,"mtime":1614864426806,"results":"83","hashOfConfig":"78"},{"size":4296,"mtime":1612819325504,"results":"84","hashOfConfig":"78"},{"size":10645,"mtime":1614964661316,"results":"85","hashOfConfig":"78"},{"size":543,"mtime":1610656890058,"results":"86","hashOfConfig":"78"},{"size":1821,"mtime":1614712184030,"results":"87","hashOfConfig":"78"},{"size":641,"mtime":1614861411752,"results":"88","hashOfConfig":"78"},{"size":1750,"mtime":1614959184140,"results":"89","hashOfConfig":"78"},{"size":6257,"mtime":1614689378157,"results":"90","hashOfConfig":"78"},{"size":3891,"mtime":1613390537059,"results":"91","hashOfConfig":"78"},{"size":9195,"mtime":1614937176428,"results":"92","hashOfConfig":"78"},{"size":6308,"mtime":1614937172902,"results":"93","hashOfConfig":"78"},{"size":1389,"mtime":1612955003163,"results":"94","hashOfConfig":"78"},{"size":691,"mtime":1610971652091,"results":"95","hashOfConfig":"78"},{"size":2164,"mtime":1611420561537,"results":"96","hashOfConfig":"78"},{"size":1556,"mtime":1614963950681,"results":"97","hashOfConfig":"78"},{"size":5357,"mtime":1611831043550,"results":"98","hashOfConfig":"78"},{"size":5949,"mtime":1612953201368,"results":"99","hashOfConfig":"78"},{"size":6966,"mtime":1614762716634,"results":"100","hashOfConfig":"78"},{"size":1999,"mtime":1611419923305,"results":"101","hashOfConfig":"78"},{"size":2786,"mtime":1612954874535,"results":"102","hashOfConfig":"78"},{"size":3409,"mtime":1614711923228,"results":"103","hashOfConfig":"78"},{"size":1256,"mtime":1614941156632,"results":"104","hashOfConfig":"78"},{"size":1453,"mtime":1614683035304,"results":"105","hashOfConfig":"78"},{"size":3952,"mtime":1612820073564,"results":"106","hashOfConfig":"78"},{"size":4395,"mtime":1614774164287,"results":"107","hashOfConfig":"78"},{"size":16106,"mtime":1614599720680,"results":"108","hashOfConfig":"78"},{"size":3794,"mtime":1614693988927,"results":"109","hashOfConfig":"78"},{"size":5509,"mtime":1614852976419,"results":"110","hashOfConfig":"78"},{"size":2562,"mtime":1614962752046,"results":"111","hashOfConfig":"78"},{"size":1948,"mtime":1612954665060,"results":"112","hashOfConfig":"78"},{"size":1474,"mtime":1612818521028,"results":"113","hashOfConfig":"78"},{"size":2946,"mtime":1614711953142,"results":"114","hashOfConfig":"78"},{"size":5475,"mtime":1614711671090,"results":"115","hashOfConfig":"78"},{"size":6790,"mtime":1614763234975,"results":"116","hashOfConfig":"78"},{"size":4709,"mtime":1612455319856,"results":"117","hashOfConfig":"78"},{"size":2621,"mtime":1614958054989,"results":"118","hashOfConfig":"78"},{"size":720,"mtime":1609868239082,"results":"119","hashOfConfig":"78"},{"size":5256,"mtime":1613731375254,"results":"120","hashOfConfig":"78"},{"size":6748,"mtime":1614797437958,"results":"121","hashOfConfig":"78"},{"size":428,"mtime":1613216698066,"results":"122","hashOfConfig":"78"},{"size":401,"mtime":1611876826825,"results":"123","hashOfConfig":"78"},{"size":352,"mtime":1612963683199,"results":"124","hashOfConfig":"78"},{"size":1157,"mtime":1610971675612,"results":"125","hashOfConfig":"78"},{"size":2777,"mtime":1614964305423,"results":"126","hashOfConfig":"78"},{"size":562,"mtime":1610020920473,"results":"127","hashOfConfig":"78"},{"size":5738,"mtime":1612818785832,"results":"128","hashOfConfig":"78"},{"size":3596,"mtime":1614868988547,"results":"129","hashOfConfig":"78"},{"size":364,"mtime":1610020809656,"results":"130","hashOfConfig":"78"},{"size":422,"mtime":1614937141182,"results":"131","hashOfConfig":"78"},{"size":8142,"mtime":1614937287305,"results":"132","hashOfConfig":"78"},{"size":1323,"mtime":1614941187124,"results":"133","hashOfConfig":"78"},{"size":3560,"mtime":1613731064728,"results":"134","hashOfConfig":"78"},{"size":10137,"mtime":1614937168893,"results":"135","hashOfConfig":"78"},{"size":509,"mtime":1614861408135,"results":"136","hashOfConfig":"78"},{"size":3842,"mtime":1613210707857,"results":"137","hashOfConfig":"78"},{"size":2440,"mtime":1613471448463,"results":"138","hashOfConfig":"78"},{"size":395,"mtime":1610656873936,"results":"139","hashOfConfig":"78"},{"size":411,"mtime":1613216674219,"results":"140","hashOfConfig":"78"},{"size":7044,"mtime":1611421775916,"results":"141","hashOfConfig":"78"},{"size":4815,"mtime":1613041829919,"results":"142","hashOfConfig":"78"},{"size":5249,"mtime":1612610811052,"results":"143","hashOfConfig":"78"},{"size":3725,"mtime":1614947806717,"results":"144","hashOfConfig":"78"},{"size":6864,"mtime":1614954999458,"results":"145","hashOfConfig":"78"},{"size":5408,"mtime":1614954391201,"results":"146","hashOfConfig":"78"},{"size":5736,"mtime":1614937156740,"results":"147","hashOfConfig":"78"},{"size":8692,"mtime":1614954165793,"results":"148","hashOfConfig":"78"},{"size":7457,"mtime":1614957573500,"results":"149","hashOfConfig":"78"},{"size":7891,"mtime":1614949882503,"results":"150","hashOfConfig":"78"},{"size":2865,"mtime":1614954056980,"results":"151","hashOfConfig":"78"},{"size":1009,"mtime":1614937151486,"results":"152","hashOfConfig":"78"},{"size":1481,"mtime":1614964689367,"results":"153","hashOfConfig":"78"},{"filePath":"154","messages":"155","errorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"156","usedDeprecatedRules":"157"},"19t1wyv",{"filePath":"158","messages":"159","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"160"},{"filePath":"161","messages":"162","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"163","usedDeprecatedRules":"164"},{"filePath":"165","messages":"166","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"167","usedDeprecatedRules":"164"},{"filePath":"168","messages":"169","errorCount":0,"warningCount":4,"fixableErrorCount":0,"fixableWarningCount":0,"source":"170","usedDeprecatedRules":"171"},{"filePath":"172","messages":"173","errorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"174","usedDeprecatedRules":"164"},{"filePath":"175","messages":"176","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"160"},{"filePath":"177","messages":"178","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"179","messages":"180","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"181"},{"filePath":"182","messages":"183","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"157"},{"filePath":"184","messages":"185","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"157"},{"filePath":"186","messages":"187","errorCount":0,"warningCount":6,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},{"filePath":"188","messages":"189","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"164"},{"filePath":"190","messages":"191","errorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"192","usedDeprecatedRules":"181"},{"filePath":"193","messages":"194","errorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},{"filePath":"195","messages":"196","errorCount":0,"warningCount":4,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},{"filePath":"197","messages":"198","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"199","usedDeprecatedRules":"157"},{"filePath":"200","messages":"201","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"160"},{"filePath":"202","messages":"203","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"164"},{"filePath":"204","messages":"205","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"206","messages":"207","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"157"},{"filePath":"208","messages":"209","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"164"},{"filePath":"210","messages":"211","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"181"},{"filePath":"212","messages":"213","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"160"},{"filePath":"214","messages":"215","errorCount":0,"warningCount":14,"fixableErrorCount":0,"fixableWarningCount":0,"source":"216","usedDeprecatedRules":"171"},{"filePath":"217","messages":"218","errorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"219","usedDeprecatedRules":"157"},{"filePath":"220","messages":"221","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"157"},{"filePath":"222","messages":"223","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"164"},{"filePath":"224","messages":"225","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"164"},{"filePath":"226","messages":"227","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"157"},{"filePath":"228","messages":"229","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"164"},{"filePath":"230","messages":"231","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"164"},{"filePath":"232","messages":"233","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"160"},{"filePath":"234","messages":"235","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"236","messages":"237","errorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"238","usedDeprecatedRules":"164"},{"filePath":"239","messages":"240","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"241","usedDeprecatedRules":"164"},{"filePath":"242","messages":"243","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"181"},{"filePath":"244","messages":"245","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"246","usedDeprecatedRules":"164"},{"filePath":"247","messages":"248","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"181"},{"filePath":"249","messages":"250","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"171"},{"filePath":"251","messages":"252","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"253","messages":"254","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"160"},{"filePath":"255","messages":"256","errorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"257","usedDeprecatedRules":"160"},{"filePath":"258","messages":"259","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"160"},{"filePath":"260","messages":"261","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"262","usedDeprecatedRules":"160"},{"filePath":"263","messages":"264","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"265"},{"filePath":"266","messages":"267","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"265"},{"filePath":"268","messages":"269","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"265"},{"filePath":"270","messages":"271","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"272","messages":"273","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"181"},{"filePath":"274","messages":"275","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"164"},{"filePath":"276","messages":"277","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"164"},{"filePath":"278","messages":"279","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"181"},{"filePath":"280","messages":"281","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"282","messages":"283","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"164"},{"filePath":"284","messages":"285","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"164"},{"filePath":"286","messages":"287","errorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"288","usedDeprecatedRules":"164"},{"filePath":"289","messages":"290","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"291","usedDeprecatedRules":"164"},{"filePath":"292","messages":"293","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"160"},{"filePath":"294","messages":"295","errorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"296","usedDeprecatedRules":"181"},{"filePath":"297","messages":"298","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"171"},{"filePath":"299","messages":"300","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"181"},{"filePath":"301","messages":"302","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"303","usedDeprecatedRules":"160"},{"filePath":"304","messages":"305","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"306","usedDeprecatedRules":"164"},{"filePath":"307","messages":"308","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"164"},{"filePath":"309","messages":"310","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"311","usedDeprecatedRules":"157"},{"filePath":"312","messages":"313","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"314","messages":"315","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"164"},{"filePath":"316","messages":"317","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"157"},{"filePath":"318","messages":"319","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"181"},{"filePath":"320","messages":"321","errorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"322","usedDeprecatedRules":"157"},{"filePath":"323","messages":"324","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"181"},{"filePath":"325","messages":"326","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"157"},{"filePath":"327","messages":"328","errorCount":0,"warningCount":4,"fixableErrorCount":0,"fixableWarningCount":0,"source":"329","usedDeprecatedRules":"164"},{"filePath":"330","messages":"331","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"332","messages":"333","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},"/Users/jay/Desktop/Current Projects/social-songs/web/src/redux/store.ts",["334","335"],"import { createElement } from \"react\";\nimport { createStore, applyMiddleware, compose } from \"redux\";\nimport { composeWithDevTools } from \"redux-devtools-extension\";\nimport thunk from \"redux-thunk\";\nimport { rootReducer,  RootState} from \"./reducers\";\n\nconst initialState = {};\n\nconst middleware = [thunk];\n\n// const store = createStore(rootReducer, initialState,compose(composeWithDevTools(applyMiddleware(...middleware))) );\n\nexport const store = createStore(rootReducer,initialState, compose(composeWithDevTools(applyMiddleware(...middleware))));\n\nexport default store;",["336","337"],"/Users/jay/Desktop/Current Projects/social-songs/web/src/redux/reducers/index.ts",[],["338","339"],"/Users/jay/Desktop/Current Projects/social-songs/web/src/routes/mates/Mates.tsx",["340"],"import React from 'react'\n// GraphQL\nimport { useQuery } from \"@apollo/client\";\nimport { MY_ACCOUNT } from \"../../graphql/queries\";\n// Components\nimport MatesComponent from \"../../components/mates/MatesComponent\"\nimport MatesSearch from \"../../components/mates/MatesSearch\";\n\ninterface RouteState {}\n\nconst Mates = () => {\n    const { data, loading } = useQuery(MY_ACCOUNT);\n    if(loading) {\n        return <div>loading...</div>\n    }\n    return (\n        <div className=\"component-container\">\n            <MatesSearch userId={!loading && data && data.me && data.me.id} />\n            <ul className=\"mates-list\">\n                <MatesComponent userId={!loading && data && data.me && data.me.id} />\n            </ul>\n        </div>    \n            );\n}\n\nexport default Mates;",["341","342"],"/Users/jay/Desktop/Current Projects/social-songs/web/src/routes/notFound/NotFound.tsx",["343"],"import React from 'react'\n\ninterface RouteState {}\n\nconst NotFound = () => {\n    return (\n    \n        <div className=\"notFound\">\n            <p>404 : NotFound</p>\n        </div>);\n}\n\nexport default NotFound;","/Users/jay/Desktop/Current Projects/social-songs/web/src/routes/searchResult/SearchResult.tsx",["344","345","346","347"],"import React, { Fragment, useState } from 'react'\nimport { Link, useLocation, withRouter } from \"react-router-dom\";\n// GraphQL\nimport { useQuery } from \"@apollo/client\";\nimport { SEARCH_APPLICATION } from \"../../graphql/queries\"\n\ninterface ComponetProps {\n  history: any\n}\n\nconst SearchResult = ({history}:ComponetProps) => {\n  const [mateId, setMateId] = useState(0);\n  const [validateRemove, setValidation ] = useState(false);\n  const [searchData, setSearchData] = useState({ search : \"\"})\n  const location = useLocation()\n  const pathName = location.pathname\n  const params = pathName.split(\"/\")\n  const { data, loading } = useQuery(SEARCH_APPLICATION, {\n    variables : {\n      input: params[2]\n    }\n  });\n\n  if(loading) {\n      return <div>loading...</div>\n  }\n\n  const onChange = (e: React.ChangeEvent<HTMLInputElement>) => {\n    setSearchData({...searchData, search : e.target.value})\n  }\n\n  const onSubmit = (e: React.FormEvent<HTMLFormElement>) => {\n    e.preventDefault();\n    console.log(searchData.search)\n    history.push(`/search/${searchData.search}`)\n  }\n\n\n  return (\n      <div className=\"component-container\">\n        <div className=\"mates-header\">\n        <form onSubmit={(e) => onSubmit(e)}>\n      { searchData.search !== \"\"  ?\n          <button className=\"clear-btn\" onClick={() => setSearchData({search: \"\"})}>\n            <img src=\"/assets/icons/menu/clear.svg\" alt=\"Clear search\"/>\n          </button>\n          :\n          <span>\n            <img src=\"/assets/icons/menu/search-blue.svg\" alt=\"Search\"/>\n          </span>\n        }\n        <input \n          type=\"text\"\n          id=\"search\"\n          name=\"search\"\n          value={searchData.search}\n          placeholder=\"Search people and projects\"\n          onChange={(e) => onChange(e)}\n          />\n      </form>\n        </div>\n        <div className=\"results-container\">\n        { !loading && data && data.searchApplication.users !== 0 &&\n        <Fragment>\n          <h3>Users</h3>\n          <ul>\n            { data.searchApplication.users.map((user: any) => \n              <li key={user.id}>\n                <Link to={`/profile/${user.id}`}> </Link>\n                  <span>\n                    <img src={user.avatar} alt=\"Users avatar\"/>\n                  </span>\n                  <p>{user.firstName}</p>\n              </li>\n            )}  \n          </ul>\n         </Fragment>\n        }\n         { !loading && data && data.searchApplication.projects !== 0 &&\n        <Fragment>\n          <h3>Projects</h3>\n          <ul>\n            { data.searchApplication.projects.map((project: any) => \n              <li key={project.id}>\n              <Link to={`/workspace/${project.id}`}></Link>\n                <span>\n                  <img className=\"project-icon\" src=\"/assets/icons/menu/projects.svg\" alt=\"Project icon\"/>\n                </span>\n                <p>{project.name}</p>\n                <p className=\"creator\">by {project.creatorId}</p>\n              </li>\n            )}  \n          </ul>\n         </Fragment>\n        }\n        </div>\n      </div>    \n          );\n}\n\nexport default withRouter(SearchResult)",["348","349"],"/Users/jay/Desktop/Current Projects/social-songs/web/src/components/playbar/Playbar.tsx",["350","351"],"import React, { useState, useEffect, useRef, Fragment } from 'react'\nimport { useLocation } from \"react-router-dom\";\nimport axios from \"axios\";\nimport AudioPlayer from 'react-h5-audio-player';\n// GraphQL \nimport { useQuery } from \"@apollo/client\";\nimport { CURRENT_PROJECT } from \"../../graphql/queries\";\n// Redux\nimport { connect, ConnectedProps } from \"react-redux\";\n\ninterface ComponentState {\n  playbar: {\n    status: boolean,\n    data :  {\n      id: string,\n      projectId: string,\n      trackName: string\n    }\n  }\n}\n\nconst mapState = (state: ComponentState) => ({\n  status: state.playbar.status,\n  data: state.playbar.data\n})\n\nconst connector = connect(mapState)\n\ntype PropsFromRedux = ConnectedProps<typeof connector>\n\ntype Props = PropsFromRedux\n\n\nconst Playbar = ({status, data} : Props) => {\n  const [buffer, setBuffer] = useState(\"\");\n  const [trackDuration, setTrackDuration] = useState(0);\n  const [isPlaying, setIsPlaying] = useState(false)\n  const [currentProjectId, setProjectId] = useState(\"\")\n  const { data: projectData , loading} = useQuery(CURRENT_PROJECT, {\n    variables : {\n      projectId : data.projectId\n    }\n  });\n  const player = useRef(null);\n  const location = useLocation()\n  const path = location.pathname;\n  const params = path.split(\"/\");\n  \n  useEffect(() => {\n    if(params[1] === \"workspace\"){\n      setProjectId(params[2])\n    }\n    if(data.projectId) {\n      setProjectId(data.projectId)\n\n      axios.get(`http://localhost:4000/get/${data.projectId}/${data.id}`)\n      .then((res) => {\n        // Make binary buffer from the response data\n        const file = Buffer.from(res.data.Body, 'binary')\n        // Convert buffer into base64 \n        const base64 = file.toString('base64');\n        // Store base 64 in comonent state\n        setBuffer(base64);\n      })\n      .catch((error) => {\n        console.log(error);\n      })\n      .then(() => {\n        // always executed\n      });  \n    }\n  },[data, buffer, params])\n\n  const playAudio = () => {\n    const audio = player.current as any;\n    setTrackDuration(audio.audio.current.duration)\n    // If player is paused then button calls play function else pause\n    if(audio.audio.current.paused) {\n      audio.audio.current.play();\n    } else  {\n      audio.audio.current.pause();\n    }\n  }\n  return (\n    <div className=\"playbar-container\" style={status === true ? { height: \"90px\" } : { height: \"0\" } }>  \n      <div className=\"playbar-wrapper\">\n      <div className=\"project-details\">\n\n          {\n            !loading && projectData && projectData.currentProject && \n            <Fragment>\n              <p className=\"track-name\">{data && data.trackName ? data.trackName : projectData.currentProject.name}</p> \n              <p className=\"project-name\">{projectData.currentProject.name}</p>\n            </Fragment>\n          }\n      </div>\n        <div className=\"playbar-controls\">\n        <button id=\"playbar-play\" onClick={() => playAudio()} disabled={buffer === \"\"}>\n          { isPlaying ?  \n          <img src=\"/assets/icons/playbar/pause.svg\" id=\"pause\" alt=\"Pause\"/> :  \n          <img src=\"/assets/icons/playbar/play.svg\" alt=\"Play\"/>\n           }           \n          </button>\n        </div>\n\n        <div className=\"playbar-scrub\">\n        <AudioPlayer\n          autoPlay\n          autoPlayAfterSrcChange={false}\n          src={`data:audio/wav;base64, ${buffer}`}\n          onPlay={() => setIsPlaying(true)}\n          ref={player}\n          defaultCurrentTime=\"0:00\"\n          defaultDuration=\"0:00\"\n        />\n        </div>\n      </div>\n    </div>\n  )\n}\n\nexport default connector(Playbar);","/Users/jay/Desktop/Current Projects/social-songs/web/src/components/post/CreatePost.tsx",[],"/Users/jay/Desktop/Current Projects/social-songs/web/src/components/header/Header.tsx",[],"/Users/jay/Desktop/Current Projects/social-songs/web/src/redux/reducers/posts/reducers.ts",[],["352","353"],"/Users/jay/Desktop/Current Projects/social-songs/web/src/redux/reducers/workspace/reducers.ts",[],"/Users/jay/Desktop/Current Projects/social-songs/web/src/redux/reducers/playbar/reducers.ts",[],"/Users/jay/Desktop/Current Projects/social-songs/web/src/components/create/CreateComponent.tsx",["354","355","356","357","358","359"],"/Users/jay/Desktop/Current Projects/social-songs/web/src/graphql/mutations.ts",[],"/Users/jay/Desktop/Current Projects/social-songs/web/src/components/navigation/DropDown.tsx",["360","361"],"import React , { Fragment, useState } from 'react'\nimport { NavLink } from \"react-router-dom\";\n\nimport { connect, ConnectedProps } from \"react-redux\";\n\nimport { useQuery } from \"@apollo/client\";\nimport { MY_PROJECTS, MY_ACCOUNT } from \"../../graphql/queries\";\n \ninterface ComponentProps {\n  application: {\n    projectPanel: boolean\n  }\n}\n\nconst mapState = (state: ComponentProps) => ({\n  projectPanel: state.application.projectPanel\n})\n\nconst mapDispatch = {\n  intialiseProject: (bool: boolean ) => ({type: \"INIT_PROJECT\", payload: bool }),\n}\n\nconst connector = connect(mapState, mapDispatch);\n\ntype PropsFromRedux = ConnectedProps<typeof connector>\n\ntype Props = PropsFromRedux\n\n\nconst DropDown = ({projectPanel, intialiseProject} : Props) => {\n  const { data, loading } = useQuery(MY_PROJECTS); \n  const { data: meData, loading: meLoading } = useQuery(MY_ACCOUNT); \n\n  const toggleCreatePanel = () => {\n    if(projectPanel === false) {\n      intialiseProject(true)\n    } else {\n      intialiseProject(false)\n    }\n  }\n  return (\n      <div \n        className=\"drop-down-wrapper\">\n      <div className=\"main-menu\">\n        <nav className=\"menu-navigation\">\n          <ul> \n            { !meLoading && meData && meData.me &&    \n              <li>\n\n                <NavLink exact activeClassName=\"navlink-active\" to=\"/profile/me\">\n                <span className=\"menu-icons\">\n                  <img src={meData.me.avatar} alt=\"Profile Avatar\" className=\"avatar\"/>\n                </span>\n                  <p>{meData.me.firstName + \" \" + meData.me.lastName}</p></NavLink></li>\n           } \n            <li>\n              <NavLink exact activeClassName=\"navlink-active\" to=\"/feed\">\n              <span className=\"menu-icons\">\n               <img src=\"/assets/icons/menu/feed.svg\" alt=\"Feed\"/>\n              </span>\n              <p>Feed</p>\n             </NavLink>\n            </li>\n            <li>\n              <NavLink exact activeClassName=\"navlink-active\" to=\"/discover\">\n              <span className=\"menu-icons\">\n               <img src=\"/assets/icons/menu/discover.svg\" alt=\"Discover\"/>\n              </span>\n              <p>Discover</p>\n             </NavLink>\n            </li>\n            <li>\n              <NavLink exact activeClassName=\"navlink-active\" to=\"/projects\">\n              <span className=\"menu-icons\">\n                <img src=\"/assets/icons/menu/projects.svg\" alt=\"Project\"/>\n              </span>\n              <p>Projects</p>\n            </NavLink>\n            </li>\n            <li>\n              <NavLink exact activeClassName=\"navlink-active\" to=\"/mates\">\n              <span className=\"menu-icons\">\n                <img src=\"/assets/icons/menu/mates.svg\" alt=\"Mates\"/>\n              </span>\n              <p>Mates</p>\n              </NavLink>\n              </li>\n          </ul>\n        </nav>\n        <nav className=\"menu-projects\">\n          <ul>\n            <li className=\"menu-projects-title\"><p>Projects</p></li>\n            <li className=\"menu-create\">\n              <button \n                className=\"menu-create-project\"\n                onClick={() => toggleCreatePanel()}\n                >\n                  <div className=\"btn-bg\"></div>\n                  <p>Create</p> \n                  <img className=\"icon-white\" src=\"/assets/icons/create/plus-white.svg\" alt=\"Create Project\"/>\n                  <img className=\"icon-blue\" src=\"/assets/icons/create/plus-blue.svg\" alt=\"Create Project\"/>\n                  </button></li>\n                  <ul className=\"project-names\">\n                  { !loading && data && data.myProjects ? data.myProjects.map((project: any) => \n            <li key={project.id}><NavLink exact activeClassName=\"navlink-active\" to={`/workspace/${project.id}`}>{project.name}</NavLink></li>) : null}\n                  </ul>\n          </ul>\n        </nav>\n      </div>\n    </div>\n  )\n}\n\nexport default connector(DropDown);\n","/Users/jay/Desktop/Current Projects/social-songs/web/src/components/post/DiscoverPost.tsx",["362","363"],"/Users/jay/Desktop/Current Projects/social-songs/web/src/components/post/MyPosts.tsx",["364","365","366","367"],"/Users/jay/Desktop/Current Projects/social-songs/web/src/routes/workspace/lyrics/LyricsViewOnly.tsx",["368"],"import React, { useState } from 'react'\n// GraphQL\nimport { useQuery } from \"@apollo/client\";\nimport { GET_LYRICS } from \"../../../graphql/queries\";\n// Redux\nimport { connect , ConnectedProps } from \"react-redux\";\n\ninterface ComponentProps {\n  project: {\n    currentProject: string\n  }\n}\n\nconst mapState = (state : ComponentProps) => ({\n  currentProject: state.project.currentProject\n})\n\nconst connector = connect(mapState);\n\ntype PropsFromRedux = ConnectedProps<typeof connector>\ntype Props = PropsFromRedux\n\nconst LyricsViewOnly = ({ currentProject}: Props)  => {\n  const { data, loading } = useQuery(GET_LYRICS , {\n    variables: {\n      projectId: currentProject\n    }\n  });\n\n  return (\n    <div className=\"lyrics-container\">\n    <div className=\"lyric-tab-header\">\n      <h5>Lyrics</h5>\n    </div>\n    <div className=\"lyric-tab-scroll-container\">\n      { !loading && data && data.lyrics && data.lyrics.length !== 0 ? data.lyrics.map((lyric:any)=> \n        <div className=\"lyric-tab-container\" key={lyric.id}> \n          <div className=\"lyric-tab-top\">\n            <p>{lyric.option}</p>\n          </div>\n          <div className=\"lyric-content\">\n            <p>{lyric.lyric}</p>\n          </div>\n       </div>\n      )\n       : <li className=\"default-workspace\">\n       <p>There are no lyrics.</p>\n      </li>\n    }\n      </div>\n  </div>\n  )\n}\n\nexport default connector(LyricsViewOnly);\n","/Users/jay/Desktop/Current Projects/social-songs/web/src/redux/actions/profile/types.ts",[],"/Users/jay/Desktop/Current Projects/social-songs/web/src/routes/profile/edit/Instruments.tsx",[],"/Users/jay/Desktop/Current Projects/social-songs/web/src/redux/actions/application/types.ts",[],"/Users/jay/Desktop/Current Projects/social-songs/web/src/components/post/Comment.tsx",[],"/Users/jay/Desktop/Current Projects/social-songs/web/src/routes/workspace/tabs/CreateTabs.tsx",[],"/Users/jay/Desktop/Current Projects/social-songs/web/src/routes/login-register/Login.tsx",[],"/Users/jay/Desktop/Current Projects/social-songs/web/src/routes/profile/edit/Bio.tsx",[],"/Users/jay/Desktop/Current Projects/social-songs/web/src/routes/workspace/tracks/TracksViewOnly.tsx",["369","370","371","372","373","374","375","376","377","378","379","380","381","382"],"import React, {useState, useEffect} from 'react'\n// GraphQL\nimport { useMutation } from \"@apollo/client\";\n// import {  } from \"../../../graphql/mutations\";\n// Redux\nimport { connect, ConnectedProps } from \"react-redux\";\n\nvar ab2str = require('arraybuffer-to-string')\nvar str2ab = require('string-to-arraybuffer')\n\nconst MicRecorder = require('mic-recorder-to-mp3');\n\ninterface ComponentProps {\n  playbar: {\n    data : object\n  }\n}\n\nconst mapState = (state: ComponentProps) => ({\n  data: state.playbar.data\n})\n\nconst mapDispatch = {\n  assignTrack: (data: any) => ({type: \"ASSIGN_TRACK\", payload: data })\n}\n\nconst connector = connect(mapState, mapDispatch);\n\ntype PropsFromRedux = ConnectedProps<typeof connector>\ntype Props = PropsFromRedux\n\nvar counter: number;\n// import RecorderComponent from \"../RecorderComponent\";\nconst TracksViewOnly  = ({assignTrack} : Props) => {\n  const [trackForm, setTrackForm] = useState({\n    name: \"\"\n  })\n  const [initForm, setForm] = useState(false);\n  const [audioBuffer, storeBuffer] = useState([]);\n  const [tracks, setTracks] = useState([{\n    name: \"\",\n    url : \"\",\n    created: \"\",\n  }])\n  // const [src, setSrc] = useState(\"\");\n  const [isActive, setIsActive] = useState(false);\n  const [minutes, setMinutes] = useState(0);\n  const [seconds, setSeconds] = useState(0);\n\n  useEffect(() => {\n    let interval: any = null;\n    if (isActive) {\n      interval = setInterval(() => {\n        if(seconds === 60) {\n          setMinutes(minutes => minutes + 1);\n          setSeconds(0);\n        }else {\n          setSeconds(seconds => seconds + 1);\n        }\n      }, 1000);\n    } else if (!isActive && seconds !== 0) {\n      clearInterval(interval);\n    }\n    return () => clearInterval(interval);\n  }, [isActive,seconds])\n\n\nconst sendAudioData = (data: any) => {\n  console.log(data);\n  assignTrack(data);\n}\n\n  return (\n    <div className=\"track-list-container\">\n    <div className=\"track-list-header\">\n      <p>Track Name</p>\n      <p>Track Length</p>\n      <p>Options</p>\n    </div>\n    <div className=\"track-list-scroll\">\n      <div className=\"track-container\">\n        <div className=\"track-details\">\n          <p className=\"track-name\">Track One</p>\n          <p className=\"track-date\">Feb 1, 2019 at 4:23 PM</p>\n        </div>\n      </div>\n      { tracks && tracks.length > 1 ? tracks.map((track) => \n      { return track.url !== \"\" &&  (\n      <li key={track.url}className=\"track-container\">\n      <button className=\"play-audio\" onClick={() => sendAudioData(track)}>  </button>\n        <div className=\"track-details\">\n          <p className=\"track-name\">{track.name}</p>\n          <p className=\"track-date\">{track.created}</p>\n        </div>\n    </li> )\n    }\n      )  : null }\n    </div> \n  </div>\n  )\n}\n\nexport default connector(TracksViewOnly);","/Users/jay/Desktop/Current Projects/social-songs/web/src/routes/workspace/tabs/Tabs.tsx",["383","384"],"import React,  { useState, useEffect } from 'react'\nimport { v4 as uuid } from \"uuid\";\n\n// GraphQL\nimport { useQuery } from \"@apollo/client\";\nimport { GET_TABS } from \"../../../graphql/queries\";\n// Redux\nimport {connect, ConnectedProps } from \"react-redux\";\n// Components\nimport CreateTabs from \"./CreateTabs\";\nimport DeleteWSItem from \"../DeleteWSItem\";\ninterface ComponentProps {\n  workspace: {\n   tabs: {\n     create: boolean,\n     delete: boolean\n   }\n  }\n  project: {\n    currentProject: string\n  }\n}\n\nconst mapState = (state : ComponentProps) => ({\n  currentProject: state.project.currentProject,\n  tabs: state.workspace.tabs\n})\n\nconst mapDispatch = {\n  initTabCreation : (bool: boolean) => ({type: \"INIT_AND_EXIT_TAB_CREATION\", payload: bool}),\n  initTabDeletion : (bool: boolean) => ({type: \"DELETE_TAB\", payload: bool}),\n}\n\nconst connector = connect(mapState, mapDispatch);\n\ntype PropsFromRedux = ConnectedProps<typeof connector>\ntype Props = PropsFromRedux\n\n\nconst Tabs = ({initTabCreation, initTabDeletion, currentProject, tabs}: Props) => {\n  const [currentTab ,setCurrentTab] = useState(-1);\n  const { data, loading } = useQuery(GET_TABS, {\n    variables: {\n      projectId: currentProject\n    }\n  });\n\n  const createTabPanel = () => {\n    initTabCreation(true)\n  }\n  const deleteTabPanel = (id: number) => {\n    setCurrentTab(id);\n    initTabDeletion(true);\n  }\n\n  return (\n    <div className=\"tabs-container\">\n      <div className=\"lyric-tab-header\">\n          <h5>Tabs</h5>\n          {/* <button className=\"add-btn\" onClick={() => createTabPanel()}>\n            <img src=\"/assets/icons/workspace/add.svg\" alt=\"Add Lyric\"/>\n          </button> */}\n        </div>\n      {  tabs.create === true ? <CreateTabs></CreateTabs> : null}\n        <div className=\"lyric-tab-scroll-container\">\n          { !loading && data && data.tabs && data.tabs.length !== 0 ? data.tabs.map((tab :any) => \n             <li key={tab.id} className=\"tab-container\">\n             <div className=\"lyric-tab-top\">\n               <p>{tab.description}</p>\n               <div className=\"button-container\">\n                 <button  onClick={() => deleteTabPanel(tab.id)}>\n                   <img src=\"/assets/icons/workspace/delete.svg\" alt=\"Delete Lyric\"/>\n                 </button>\n                 <button className=\"edit-btn\">\n                   <img src=\"/assets/icons/workspace/edit.svg\" alt=\"Edit Lyric\"/>\n                 </button>\n               </div>\n             </div>\n             <div className=\"tab-grid\">\n               <div className=\"grid-lines\">\n                  <div className=\"line\"></div>\n                  <div className=\"line\"></div>\n                  <div className=\"line\"></div>\n                  <div className=\"line\"></div>\n                  <div className=\"line\"></div>\n                  <div className=\"line\"></div>\n               </div>\n                {  tab.tab.map((item: any) => \n                 <span key={uuid()}>\n                    <p>{ item === -1 ? \"\" : item}</p>\n                 </span> \n                )}\n             </div>\n             {tabs.delete && currentTab === tab.id && <DeleteWSItem wsType=\"tab\" itemId={tab.id}/>}\n         </li> ) : \n         <li className=\"default-workspace\">\n           <p>Add a tab</p>\n           <button onClick={() => initTabCreation(true)}>Create</button>\n          </li>\n         }\n    </div>\n    </div>\n  )\n}\n\nexport default connector(Tabs);\n","/Users/jay/Desktop/Current Projects/social-songs/web/src/redux/actions/project/types.ts",[],"/Users/jay/Desktop/Current Projects/social-songs/web/src/redux/actions/workspace/types.ts",[],"/Users/jay/Desktop/Current Projects/social-songs/web/src/components/post/DeletePost.tsx",[],"/Users/jay/Desktop/Current Projects/social-songs/web/src/routes/workspace/DeleteWSItem.tsx",[],"/Users/jay/Desktop/Current Projects/social-songs/web/src/routes/login-register/Register.tsx",[],"/Users/jay/Desktop/Current Projects/social-songs/web/src/routes/workspace/tracks/Tracks.tsx",[],"/Users/jay/Desktop/Current Projects/social-songs/web/src/graphql/queries.ts",[],"/Users/jay/Desktop/Current Projects/social-songs/web/src/components/header/AccountOptions.tsx",[],"/Users/jay/Desktop/Current Projects/social-songs/web/src/routes/workspace/tabs/TabsViewOnly.tsx",["385","386"],"import React,  { useState, useEffect } from 'react'\nimport { v4 as uuid } from \"uuid\";\n\n// GraphQL\nimport { useQuery } from \"@apollo/client\";\nimport { GET_TABS } from \"../../../graphql/queries\";\n// Redux\nimport {connect, ConnectedProps } from \"react-redux\";\n\ninterface ComponentProps {\n  project: {\n    currentProject: string\n  }\n}\n\nconst mapState = (state : ComponentProps) => ({\n  currentProject: state.project.currentProject,\n})\n\nconst connector = connect(mapState);\n\ntype PropsFromRedux = ConnectedProps<typeof connector>\ntype Props = PropsFromRedux\n\n\nconst TabsViewOnly = ({currentProject}: Props) => {\n  const { data, loading } = useQuery(GET_TABS, {\n    variables: {\n      projectId: currentProject\n    }\n  });\n\n  return (\n    <div className=\"tabs-container\">\n      <div className=\"lyric-tab-header\">\n          <h5>Tabs</h5>\n        </div>\n        <div className=\"lyric-tab-scroll-container\">\n          { !loading && data && data.tabs && data.tabs.length !== 0 ? data.tabs.map((tab :any) => \n             <li key={tab.id} className=\"tab-container\">\n             <div className=\"lyric-tab-top\">\n               <p>{tab.description}</p>\n             </div>\n             <div className=\"tab-grid\">\n               <div className=\"grid-lines\">\n                  <div className=\"line\"></div>\n                  <div className=\"line\"></div>\n                  <div className=\"line\"></div>\n                  <div className=\"line\"></div>\n                  <div className=\"line\"></div>\n                  <div className=\"line\"></div>\n               </div>\n                {  tab.tab.map((item: any) => \n                 <span key={uuid()}>\n                    <p>{ item === -1 ? \"\" : item}</p>\n                 </span> \n                )}\n             </div>\n         </li> ) : \n         <li className=\"default-workspace\">\n           <p>There are no tabs</p>\n          </li>\n         }\n    </div>\n    </div>\n  )\n}\n\nexport default connector(TabsViewOnly);\n","/Users/jay/Desktop/Current Projects/social-songs/web/src/components/formatTime/FormatTimestamp.tsx",["387"],"import React, { useState, useEffect } from 'react'\n\ninterface ComponentProps {\n  timestamp : any\n}\n\nfunction FormatTimestamp({ timestamp }: ComponentProps ) {\n    const [formattedTime , setFormattedTime] = useState(\"\")\n\n    useEffect(() => {\n      formatTimestamp();\n    }, [])\n\n    const formatTimestamp = () => {\n      const splitDateAndTime = timestamp.split(\"T\")\n      const date = splitDateAndTime[0].split(\"-\");\n      const time =  splitDateAndTime[1].split(\":\");\n      const hourAndMin = time[0] + \":\" + time[1];\n      var month;\n      switch(date[1]){\n        case \"01\" : month = \"January\"; break;\n        case \"02\" : month = \"Febraury\"; break;\n        case \"03\" : month = \"March\"; break;\n        case \"04\" : month = \"April\"; break;\n        case \"05\" : month = \"May\"; break;\n        case \"06\" : month = \"June\"; break;\n        case \"07\" : month = \"July\"; break;\n        case \"08\" : month = \"August\"; break;\n        case \"09\" : month = \"September\"; break;\n        case \"10\" : month = \"October\"; break;\n        case \"11\" : month = \"November\"; break;\n        case \"12\" : month = \"December\"; break;  \n      };\n      const year = date[0].split(\"\")\n      const yearAbbr = year[2] + year[3];\n      const fullDate = date[2] +  \" \" + month + \" \" + yearAbbr;\n      const displayTimestamp = fullDate + \" at \" + hourAndMin;\n      setFormattedTime(displayTimestamp);\n    }\n\n     return (\n      <p className=\"post-date\">{formattedTime}</p>\n     )\n}\n\nexport default FormatTimestamp;","/Users/jay/Desktop/Current Projects/social-songs/web/src/routes/workspace/lyrics/Lyrics.tsx",[],"/Users/jay/Desktop/Current Projects/social-songs/web/src/routes/workspace/tracks/Recording.tsx",["388"],"import React, {useState, Fragment} from 'react'\nimport axios from \"axios\";\n// GraphQL\nimport { useQuery, useMutation } from \"@apollo/client\"\nimport { MY_ACCOUNT, GET_TRACKS } from \"../../../graphql/queries\";\nimport { CREATE_TRACK, DELETE_TRACK } from \"../../../graphql/mutations\";\n// Redux\nimport { connect, ConnectedProps } from \"react-redux\";\n\nconst MicRecorder = require('mic-recorder-to-mp3');\n\ninterface ComponentProps {\n  playbar: {\n    data : object\n  }\n  project: {\n    currentProject: string\n  }\n}\n\nconst mapState = (state: ComponentProps) => ({\n  data: state.playbar.data,\n  currentProject: state.project.currentProject\n})\n\nconst mapDispatch = {\n  assignTrack: (data: any) => ({type: \"ASSIGN_TRACK\", payload: data })\n}\n\nconst connector = connect(mapState, mapDispatch);\n\ntype PropsFromRedux = ConnectedProps<typeof connector>\ntype Props = PropsFromRedux\n\nvar counter: number;\nconst Recording  = ({currentProject} : Props) => {\n  const [trackForm, setTrackForm] = useState({\n    name: \"\"\n  })\n  const [initForm, setForm] = useState(false);\n  const [audioBuffer, storeBuffer] = useState([]);\n  const [loadingSave, setLoadingSave] = useState(false);\n  const [recording, setRecording] = useState(false);\n  const { data: meData } = useQuery(MY_ACCOUNT);\n  const [ createTrack ] = useMutation(CREATE_TRACK);\n  const [deleteTrack] = useMutation(DELETE_TRACK);\n  //New instance\nconst recorder = new MicRecorder({\n  bitRate: 128\n});\n\n// Start recording. Browser will request permission to use your microphone.\nconst startRecording = () => {\n  if(counter === 0 || counter === undefined) {\n      recorder.start().then(() => {\n      }).catch((e: any) => {\n        console.error(e);\n      });\n      return counter = 1;\n  } else if(counter === 1) {\n  // Stop recording\n  recorder\n  .stop()\n  .getMp3().then(([buffer, blob]: any) => {\n    // Store buffer in component state\n    storeBuffer(buffer);\n    // Open Form pop up\n    setForm(true);\n}).catch((err: any) => {\n  alert('We could not retrieve your message');\n  console.log(err);\n});\nreturn counter = 0;\n  }\n}\n\nconst onChange = (e:React.ChangeEvent<HTMLInputElement>) => {\n  setTrackForm({...trackForm, [e.target.name] : e.target.value })\n}\n\nconst onSubmit = async (e:React.FormEvent<HTMLFormElement>) => {\n  e.preventDefault();\n  setLoadingSave(true);\n  // Create Track name\n  const trackName = trackForm.name;\n  // Create New file\n  const newAudioFile = new File(audioBuffer, trackName, {\n    type: \"audio/mp3\",\n    lastModified: Date.now(),\n  });\n\n  var newFormData = new FormData();\n  newFormData.append(\"userId\", meData.me.id);\n  newFormData.append(\"users-audio\", newAudioFile);\n  newFormData.append(\"projectId\", currentProject);\n\n  const response = await createTrack({\n    variables: {\n      name: trackName,\n      projectId: currentProject\n  }, update : (cache , { data: { createTrack }}) => {\n      const cacheTracks: any = cache.readQuery({\n        query: GET_TRACKS,\n        variables : {\n            projectId: currentProject\n          },\n      });\n      if(cacheTracks.tracks !== null) {\n        let modifyCache = [...cacheTracks.tracks, createTrack]\n        cache.writeQuery({\n          query: GET_TRACKS,\n          variables : {\n              projectId: currentProject\n            },\n            data: {\n              tracks : modifyCache\n            }\n        })\n      }\n  }})\n\n  try {\n    if(response.data.createTrack) {\n      newFormData.append(\"trackId\", response.data.createTrack.id);\n      axios({\n        method: \"post\",\n        url: 'http://localhost:4000/upload',\n        data: newFormData,\n        headers: { \"Content-Type\": \"multipart/form-data\" },\n      })\n        .then((_res: any) => {\n          //handle success\n          setLoadingSave(false);\n          setTrackForm({ name: \"\"});\n          setForm(false);\n        })\n        .catch(async (res: any) => {\n          //handle error\n          console.log(res);\n          // If there is an error sending the file to S3\n          // Remove the correlated track data with GraphQL\n          await deleteTrack({\n            variables: {\n              projectId: currentProject,\n              trackId: response.data.createTrack.id\n            },\n            update: (cache, { data: deleteTrack }) => {\n              cache.writeQuery({\n               query: GET_TRACKS, \n                variables : {\n                  projectId : currentProject\n                }, \n                data: {\n                  tracks : deleteTrack\n                }\n              })\n            }\n          })\n        });\n    }\n  } catch(err) {\n    console.log(err)\n  }\n}\n  return (\n    <Fragment>\n          <button onClick={() => startRecording()} className=\"create-btns\" id=\"record\">\n          { recording ? <img src=\"/assets/icons/workspace/recording.svg\" alt=\"Recording\"/>:    \n          <img src=\"/assets/icons/workspace/record.svg\" alt=\"Record\"/> }\n        </button>\n      {  initForm ===  true &&\n        <div className=\"track-popup\">\n          <form onSubmit={(e) => onSubmit(e)}>\n            <span>\n              <label htmlFor=\"trackName\">Name your track</label>\n              <input type=\"text\" name=\"name\" id=\"trackName\" value={trackForm.name} placeholder=\"Enter a track name.\" onChange={(e) => onChange(e)}/>\n            </span>\n            <input type=\"submit\" value=\"Save Track\"/>\n          </form>\n        </div>\n      }\n      {loadingSave ? <div className=\"loading-save\">Loading...</div> : null }\n      </Fragment>\n  )\n}\n\nexport default connector(Recording);","/Users/jay/Desktop/Current Projects/social-songs/web/src/routes/workspace/Workspace.tsx",[],"/Users/jay/Desktop/Current Projects/social-songs/web/src/routes/workspace/lyrics/CreatLyrics.tsx",[],"/Users/jay/Desktop/Current Projects/social-songs/web/src/index.tsx",[],"/Users/jay/Desktop/Current Projects/social-songs/web/src/App.tsx",[],"/Users/jay/Desktop/Current Projects/social-songs/web/src/Routes.tsx",["389","390"],"import React, { useEffect } from 'react';\nimport { BrowserRouter as Router, Switch, Route , Redirect, useLocation} from \"react-router-dom\";\n\n// GraphQL \nimport { useQuery } from \"@apollo/client\";\nimport { MY_ACCOUNT } from \"./graphql/queries\";\n\n// Redux \nimport { connect, ConnectedProps } from \"react-redux\";\n\nimport Login from './routes/login-register/Login';\nimport Register from './routes/login-register/Register';\n\n// Components \nimport Header from \"./components/header/Header\";\nimport Playbar from \"./components/playbar/Playbar\";\nimport Navigation from \"./components/navigation/Navigation\";\nimport CreatePost from './components/post/CreatePost';\nimport CreateProject from './components/project/CreateProject';\nimport AuthRoute from \"./components/authRoute/AuthRoute\";\nimport UnAuthRedirect from \"./components/unAuthRedirect/UnAuthRedirect\"\nimport UserProfile from \"./components/profile/UserProfile\"\nimport ScrollToTop from \"./components/scrollToTop/ScrollToTop\"\n// Routes\nimport Feed from './routes/feed/Feed';\nimport Workspace from './routes/workspace/Workspace';\nimport Mates from './routes/mates/Mates';\nimport Profile from './routes/profile/Profile';\nimport Projects from './routes/projects/Projects';\nimport NotFound from './routes/notFound/NotFound';\nimport Landing from \"./routes/landing/Landing\";\nimport Discover from \"./routes/discover/Discover\";\nimport SearchResult from \"./routes/searchResult/SearchResult\";\n\ninterface ComponentProps {\n  application : {\n      location: string\n      postPanel : boolean\n      projectPanel : boolean\n  }  \n  user: {\n    authenticated : boolean,\n    user : {}\n  }\n  // project: {\n  //   projectPanel : boolean,\n  //   projectDetails : {}\n  // }\n}\n\nconst mapState = (state : ComponentProps) => ({\n  authenticated : state.user.authenticated,\n  location: state.application.location,\n  projectPanel: state.application.projectPanel,\n  postPanel : state.application.postPanel\n})\n\nconst mapDispatch = {\n  activatePlaybar : (val:Boolean) => ({type: \"OPEN_PLAYBAR\", payload: val}),\n  authenticateUser: (user: object) => ({ type: \"USER_AUTHENTICATED\", payload: user}),\n}\n\nconst connector = connect(mapState, mapDispatch);\n\ntype PropsFromRedux = ConnectedProps<typeof connector>\ntype Props = PropsFromRedux\n\n\n// Component \nconst Routes = ({location, projectPanel, authenticated, postPanel, activatePlaybar, authenticateUser} : Props) => {\n  const { data , loading } = useQuery(MY_ACCOUNT);\n\n  useEffect(() => {\n    if(!loading && data && data.me) {\n      const contructedUserData = {\n        id : data.me.id,\n        email: data.me.email,\n    }\n    authenticateUser(contructedUserData);\n    }\n    if(!loading && location !== \"workspace\") {\n      activatePlaybar(false);\n    } else if(!loading && location === \"workspace\") {\n      activatePlaybar(true);\n    }\n  }, [location, data, loading, activatePlaybar, authenticateUser])\n  \n    return (\n      <Router>\n\n         {authenticated === true ? \n         <div className=\"app\">\n         <Header />\n         <div className={location !== \"workspace\" ? \"app-wrapper\" : \"app-workspace-wrapper\"} > \n         {location === \"workspace\" ?  null : <Navigation></Navigation>}\n         {postPanel === true ? <CreatePost/> : null}\n         {projectPanel === true ? <CreateProject/> : null}\n         <ScrollToTop />\n           <Switch>\n             <Route exact path=\"/\">\n               <Redirect to=\"/feed\"></Redirect> \n            </Route> \n            <Route exact path=\"/login\" component={Login} />\n            <Route exact path=\"/register\" component={Register} />\n            <Route exact path=\"/\" /> \n            <Route exact path=\"/feed\" component={Feed} />\n            <Route exact path=\"/discover\" component={Discover} />\n             <Route exact path=\"/workspace/:id\" component={Workspace} />\n             <Route exact path=\"/profile/me\" component={Profile} />\n             <Route exact path=\"/projects\" component={Projects} />\n             <Route exact path=\"/mates\" component={Mates} />\n             <Route exact path=\"/search/:input\" component={SearchResult} />\n             <Route exact path=\"/profile/:id\" component={UserProfile} />\n             <Route component={NotFound} />\n           </Switch>\n         </div>\n         <Playbar></Playbar>\n       </div> \n       :\n        <div className=\"landing\">\n              <ScrollToTop />\n          <Switch>\n              <Route exact path=\"/\" component={Landing} />\n              <Route exact path=\"/login\" component={Login} />\n              <Route exact path=\"/register\" component={Register} />\n              {/* <Route component={NotFound} /> */}\n              <Route exact path=\"/login\" component={UnAuthRedirect} />\n              <Route exact path=\"/register\" component={UnAuthRedirect} />\n              <Route exact path=\"/feed\" component={UnAuthRedirect} />\n              <Route exact path=\"/discover\" component={UnAuthRedirect} />\n              <Route path=\"/workspace/\" component={UnAuthRedirect} />\n              <Route path=\"/profile/\" component={UnAuthRedirect} />\n              <Route exact path=\"/projects\" component={UnAuthRedirect} />\n              <Route exact path=\"/mates\" component={UnAuthRedirect} />\n          </Switch>\n        </div>\n         }\n      </Router>\n    )\n}\n\nexport default connector(Routes);\n","/Users/jay/Desktop/Current Projects/social-songs/web/src/routes/profile/Profile.tsx",[],"/Users/jay/Desktop/Current Projects/social-songs/web/src/routes/discover/Discover.tsx",["391"],"import React from 'react'\n\nimport DiscoverPost from \"../../components/post/DiscoverPost\";\nimport CreateComponent from \"../../components/create/CreateComponent\"\ninterface ComponentProps {\n}\n\nconst Discover = () => {\n    return (\n      <div className=\"component-container\">\n        <div className=\"feed-flex\">\n          <CreateComponent />\n          <DiscoverPost />\n        </div>\n      </div> \n    );\n}\n\nexport default Discover;","/Users/jay/Desktop/Current Projects/social-songs/web/src/components/scrollToTop/ScrollToTop.tsx",[],["392","393"],"/Users/jay/Desktop/Current Projects/social-songs/web/src/components/unAuthRedirect/UnAuthRedirect.tsx",[],"/Users/jay/Desktop/Current Projects/social-songs/web/src/redux/reducers/profile/reducers.ts",[],"/Users/jay/Desktop/Current Projects/social-songs/web/src/redux/reducers/application/reducers.ts",[],"/Users/jay/Desktop/Current Projects/social-songs/web/src/redux/reducers/user/reducers.ts",[],"/Users/jay/Desktop/Current Projects/social-songs/web/src/components/post/UserPosts.tsx",[],"/Users/jay/Desktop/Current Projects/social-songs/web/src/components/mates/MatesSearch.tsx",[],"/Users/jay/Desktop/Current Projects/social-songs/web/src/redux/actions/user/types.ts",[],"/Users/jay/Desktop/Current Projects/social-songs/web/src/routes/projects/Projects.tsx",[],"/Users/jay/Desktop/Current Projects/social-songs/web/src/components/profile/UserProfile.tsx",[],"/Users/jay/Desktop/Current Projects/social-songs/web/src/redux/reducers/project/reducers.ts",[],"/Users/jay/Desktop/Current Projects/social-songs/web/src/components/header/Search.tsx",["394","395"],"import React, { useState, useEffect, Fragment, useRef } from 'react'\nimport { Link, useLocation, withRouter } from \"react-router-dom\"\n// GraphQL\nimport { useQuery } from \"@apollo/client\"\nimport { SEARCH_APPLICATION } from \"../../graphql/queries\"\n// Redux\nimport { connect, ConnectedProps } from \"react-redux\"\n\ninterface ComponentProps {\n  applciation : {\n    searchPanel: boolean\n  }\n}\n\nconst mapState = (state: any) => ({\n  searchPanel: state.application.searchPanel\n}) \n\nconst mapDispatch = {\n  toggleSearch : (payload: boolean) => ({ type: \"TOGGLE_SEARCH\", payload: payload })\n}\n\nconst connector = connect(mapState, mapDispatch);\n\ntype PropsFromRedux = ConnectedProps<typeof connector>\ntype Props = PropsFromRedux & {\n  history : any\n}\n\nconst Search = ({toggleSearch, searchPanel, history}: Props) => {\n  const [ searchData, setSearchData ] = useState({ search: \"\" })\n  const [routeLocation, setLocation] = useState(\"\")\n  const { data, loading } = useQuery(SEARCH_APPLICATION, {\n    variables: {\n      input : searchData.search\n    }\n  })\n  const location = useLocation();\n  const searchInput = useRef(null);\n\n  useEffect(() => {\n    let pathname = location.pathname;\n    if(routeLocation !== \"\" && pathname!== routeLocation) {\n      toggleSearch(false)\n      setLocation(pathname)\n    } else {\n      setLocation(pathname)\n    }\n\n  }, [location, routeLocation])\n\n  const closeContainer = () => {\n    if(searchPanel === true ) {\n      toggleSearch(false);\n    } else {\n      toggleSearch(true);\n    }\n  }\n  const onChange = (e:React.ChangeEvent<HTMLInputElement>) => {\n    setSearchData({...searchData, search: e.target.value })\n  }\n\n  const onSubmit = (e:React.FormEvent<HTMLFormElement>) => {\n    e.preventDefault()\n    history.push(`/search/${searchData.search}`)\n  }\n\n  return (\n    <div className=\"search-container\">\n      <span className=\"flex-wrapper\">\n        <button className=\"header-btns\" onClick={() => closeContainer()}>\n          <img src=\"/assets/icons/menu/back.svg\" alt=\"back\"/>\n        </button>\n        <form id=\"search-form\" onSubmit={(e) => onSubmit(e)}>\n          <input autoFocus ref={searchInput} type=\"text\" id=\"search-bar\" placeholder=\"Search projects, people and bands\" value={searchData.search} onChange={(e) => onChange(e)}/>\n        </form>\n      </span>\n      { searchData.search !== \"\" && \n        <ul className=\"search-list\">\n           { !loading && data && data.searchApplication.users.length !== 0 && \n           <Fragment>\n            <h3>Users</h3>\n              { data.searchApplication.users.map((user: any) => \n                <li key={user.id}>\n                  <Link to={`/profile/${user.id}`}> </Link>\n                    <span>\n                      <img src={user.avatar} alt=\"Users avatar\"/>\n                    </span>\n                    <p>{user.firstName}</p>\n                </li>\n              )}  \n          </Fragment> }\n          { !loading && data && data.searchApplication.projects.length !== 0 && <Fragment>\n          <h3>Projects</h3>\n            {data.searchApplication.projects.map((project: any) => \n            <li key={project.id}>\n              <Link to={`/workspace/${project.id}`}></Link>\n                <span>\n                  <img className=\"project-icon\" src=\"/assets/icons/menu/projects.svg\" alt=\"Project icon\"/>\n                </span>\n                <p>{project.name}</p>\n                <p className=\"creator\">by {project.creatorId}</p>\n              </li>\n          )}\n          </Fragment> }\n        </ul>\n      }\n    </div>\n  )\n}\n\nexport default withRouter(connector(Search));","/Users/jay/Desktop/Current Projects/social-songs/web/src/components/post/FeedPosts.tsx",["396"],"import React, { useState, Fragment, useEffect } from 'react'\nimport { Link } from \"react-router-dom\";\n// GraphQL\nimport { useQuery, useMutation } from \"@apollo/client\";\nimport {MY_ACCOUNT, FEED_POSTS} from \"../../graphql/queries\";\nimport { LIKE_POST } from \"../../graphql/mutations\";\n// Redux\nimport { connect, ConnectedProps } from \"react-redux\";\n// Components\nimport DeletePost from \"./DeletePost\";\nimport Comment from \"./Comment\";\nimport FormatTimestamp from \"../formatTime/FormatTimestamp\"\nimport ContributorAvatar from \"../project/contributors/ContributorAvatar\";\n\ninterface ComponentProps {\n  user: { \n    user: {\n      id : number\n    }\n  },\n  posts: {\n    postId: number,\n    postDelete: boolean\n  }\n}\n\nconst mapState = (state: ComponentProps) => ({\n  user: state.user.user,\n  postId : state.posts.postId,\n  postDelete : state.posts.postDelete\n})\n\nconst mapDispatch = {\n  setPostId : (id:number) => ({type: \"SELECTED_POST_ID\", payload: id}),\n  validatePostDelete: (payload:boolean) => ({type: \"SET_DELETE_COMPONENT\", payload: payload}),\n  activatePlaybar : (payload: boolean) => ({ type: \"OPEN_PLAYBAR\", payload: payload }),\n  assignTrack : (payload: object) => ({type: \"ASSIGN_TRACK\", payload: payload}),\n}\n\nconst connector = connect(mapState, mapDispatch);\ntype PropsFromRedux = ConnectedProps<typeof connector>\ntype Props = PropsFromRedux;\n\nconst FeedPosts = ({ user, postId, postDelete, setPostId, validatePostDelete, activatePlaybar, assignTrack }:Props) => {  \n  const [ postIdForComment, setIdForComments ] = useState(0)\n  const [likePost] = useMutation(LIKE_POST);\n  const { data, loading, error } = useQuery(FEED_POSTS);\n  const { data: meData, loading: meLoading } = useQuery(MY_ACCOUNT);\n\n  useEffect(() => {\n    return () => {\n      validatePostDelete(false);\n      setPostId(-1);\n    }\n  },[])\n\n  if(loading) {\n    console.log(\"loading\");\n    return <div>Loading...</div>\n  }\n  if(error) {\n    console.log(error)\n    return <div>error!</div>\n  }\n  const toggleDeletePopUp = (id: number) => {\n    validatePostDelete(true);\n    setPostId(id);\n  }\n\n  const likePostById = (postId: number) => {\n    likePost({ \n      variables : { postId },\n      update: (cache, { data: { likePost } }) => {\n        // Read the query cache\n        const cacheLikeData : any = cache.readQuery({query : FEED_POSTS })  \n        var index: any;\n        // Assign varaible with the cache so we can modify\n        var myFeed = [...cacheLikeData.myFeed];\n        // Loop through the poss array\n        for(var x = 0; x < myFeed.length; x++) {\n          // Find the post that links to the like we just created\n          if(myFeed[x].postId === likePost.postId) {\n            // Get the index of the post \n            index = myFeed.indexOf(myFeed[x]);\n          }\n        }\n        // Remove the item from the index we found\n        // and replace with the new post data we get from the mutation response \n        myFeed.splice(index, 1,likePost);\n        // Write query to update cache passing the myFeed variable in\n        cache.writeQuery({\n          query : FEED_POSTS,\n           data: {\n            myFeed : myFeed\n          }\n        })\n      }\n    })\n    .catch(err => console.log(err))\n  }\n  \n const openComments = (postId: number) => {\n   if(postIdForComment === postId) {\n    setIdForComments(0)\n   } else {\n    setIdForComments(postId)\n   }\n }\n\n  const openPlaybarAndAssignTrackId = (trackId: string, projectId: string) => {\n    activatePlaybar(true);\n    const dataObject = {\n      id: trackId,\n      projectId,\n      trackName: \"\"\n    }\n    assignTrack(dataObject)\n  }\n  \n    return (\n     <Fragment>\n        {!loading && data && data.myFeed.length !== 0  ?\n              <ul>\n                {data.myFeed.map((post: any) => \n                <li key={post.post.id}>\n                  { post.project !== null ?\n                     <div className=\"post\">\n                       <div className=\"post-top-wrapper\">\n                      <div className=\"avatar\">\n                      <img src={post.post.avatar} alt=\"User's Avatar\"/>\n                      </div>\n                      { !meLoading && meData && meData.me && meData.me.id === post.post.creatorId ?\n                          <span className=\"post-name-wrapper\">\n                          <Link to={`/profile/${post.post.creatorId}`} className=\"post-name post-user\">You <span className=\"shared-project-span\">Shared project</span></Link>\n                          <FormatTimestamp timestamp={post.post.created} />\n                        </span>  :\n                         <span className=\"post-name-wrapper\">\n                         <Link to={`/profile/${post.post.creatorId}`} className=\"post-name post-user\">{post.post.creatorName} <span className=\"shared-project-span\">Shared project</span></Link>\n                         <FormatTimestamp timestamp={post.post.created} />\n                       </span> \n                      }  \n                      <span className=\"post-btn-wrapper\">\n                        { !meLoading && meData && meData.me && meData.me.id=== post.post.creatorId ? \n                        <button className=\"post-buttons\" onClick={() => toggleDeletePopUp(post.post.id)}>\n                         <img src=\"/assets/icons/workspace/delete.svg\" alt=\"Delete post\"/>\n                        </button> :\n                          <button className=\"post-buttons\" onClick={() => likePostById(post.post.id)}> \n                            <img src=\"/assets/icons/post/like.svg\" alt=\"Like post\"/> \n                          </button>}\n                      </span>\n                    </div>\n                      <div className=\"post-project-wrapper\">\n                        <button onClick={() => openPlaybarAndAssignTrackId(post.project.mainTrack, post.project.id)}>\n                          <img src=\"/assets/icons/post/play.svg\" alt=\"Play button\"/>\n                        </button>\n                          <p className=\"project-name\">{post.post.content}</p>\n                          <Link className=\"project-name-link\" to={`/workspace/${post.project.id}`}>See project</Link>\n                         {/* <Link className=\"project-name-link\" to={`/workspace/${post.project.id}`}>{post.post.content}</Link> */}\n                      </div>\n                      <div className=\"contributors\">\n                        <span className=\"flex-wrapper\">\n                        <p>Contributors</p>\n                          <span className=\"contributors-avatars\">\n                          <ContributorAvatar projectId={post.project.id} />\n                          </span>\n                        </span>   \n                        </div>\n\n                     <div className=\"post-bottom-wrapper\">\n                         <button onClick={() => openComments(post.post.id)} className=\"comment-button\">Comments</button>\n                         <p className=\"comments-length\">{post.comments.length}</p>\n                       <div className=\"likes\"> \n                         <img src=\"/assets/icons/post/thumb.svg\" alt=\"Likes\"/>\n                         <p>{post.likes.length}</p>\n                       </div>\n                     </div>\n                     {postIdForComment === post.post.id ? <Comment postId={post.post.id} /> : null}\n                     { postDelete === true &&  postId === post.post.id && <DeletePost />}\n                   </div> \n                      :\n                  <div className=\"post\">\n                    <div className=\"post-top-wrapper\">\n                      <div className=\"avatar\">\n                      <img src={post.post.avatar} alt=\"User's Avatar\"/>\n                      </div>\n                      { !meLoading && meData && meData.me && meData.me.id === post.post.creatorId ?\n                          <span className=\"post-name-wrapper\">\n                          <Link to={`/profile/${post.post.creatorId}`} className=\"post-name post-user\">You</Link>\n                          <FormatTimestamp timestamp={post.post.created} />\n                        </span>  :\n                         <span className=\"post-name-wrapper\">\n                         <Link to={`/profile/${post.post.creatorId}`} className=\"post-name post-user\">{post.post.creatorName}</Link>\n                         <FormatTimestamp timestamp={post.post.created} />\n                       </span> \n\n                      }\n                      \n                      <span className=\"post-btn-wrapper\">\n                        { !meLoading && meData && meData.me && meData.me.id=== post.post.creatorId ? \n                        <button className=\"post-buttons\" onClick={() => toggleDeletePopUp(post.post.id)}>\n                         <img src=\"/assets/icons/workspace/delete.svg\" alt=\"Delete post\"/>\n                        </button> :\n                          <button className=\"post-buttons\" onClick={() => likePostById(post.post.id)}> \n                            <img src=\"/assets/icons/post/like.svg\" alt=\"Like post\"/> \n                          </button>}\n                      </span>\n                    </div>\n                    <div className=\"post-content\"><p>{post.post.content}</p></div>\n                    <div className=\"post-bottom-wrapper\">\n                        <button onClick={() => openComments(post.post.id)} className=\"comment-button\">Comments</button>\n                        <p className=\"comments-length\">{post.comments.length}</p>\n                      <div className=\"likes\"> \n                        <img src=\"/assets/icons/post/thumb.svg\" alt=\"Likes\"/>\n                        <p>{post.likes.length}</p>\n                      </div>\n                    </div>\n                    {postIdForComment === post.post.id ? <Comment postId={post.post.id} /> : null}\n                    { postDelete === true &&  postId === post.post.id && <DeletePost />}\n                  </div> }\n                  </li> )}\n              </ul> : \n              <div className=\"no-posts\">\n                <p>There are no posts on your feed. Check out the <Link to=\"/discover\">Discover</Link> page and find some new mates. </p>\n              </div> }\n    </Fragment>\n    );\n}\n\nexport default connector(FeedPosts);","/Users/jay/Desktop/Current Projects/social-songs/web/src/redux/actions/playbar/types.ts",[],"/Users/jay/Desktop/Current Projects/social-songs/web/src/components/navigation/Navigation.tsx",["397","398"],"import React, { useState } from 'react'\nimport { NavLink } from \"react-router-dom\";\n// GraphQL\nimport { useQuery } from \"@apollo/client\"\nimport { MY_PROJECTS, MY_ACCOUNT } from \"../../graphql/queries\";\n//  Redux\nimport { connect, ConnectedProps } from \"react-redux\";\n\ninterface ComponentProps  {\n  application : {\n    projectPanel: boolean\n  }\n}\n\nconst mapState = (state: ComponentProps) => ({\n  projectPanel: state.application.projectPanel\n})\n\nconst mapDispatch = {\n  intialiseProject: (bool: boolean ) => ({type: \"INIT_PROJECT\", payload: bool }),\n}\n\nconst connector = connect(mapState, mapDispatch);\ntype PropsFromRedux = ConnectedProps<typeof connector>\ntype Props = PropsFromRedux\n\n const Navigation = ({projectPanel,  intialiseProject} : Props) => {\n   const [activeLink, setActiveLink] = useState(\"\")\n  const { data, loading } = useQuery(MY_PROJECTS);\n  const { data: meData, loading: meLoading } = useQuery(MY_ACCOUNT);\n\n  const createProject = () => {\n    if(projectPanel === false) {\n      intialiseProject(true)\n    } else {\n      intialiseProject(false)\n    }\n  } \n  return (\n    \n    <div className=\"main-menu\">\n      <h4 className=\"menu-title\">Menu</h4>\n      <nav className=\"menu-navigation\">\n      <ul> \n            { !meLoading && meData && meData.me &&    \n              <li>\n                <NavLink exact activeClassName=\"navlink-active\" to=\"/profile/me\">\n                <span className=\"menu-icons\">\n                  <img src={meData.me.avatar} alt=\"Profile Avatar\" className=\"avatar\"/>\n                </span>\n                <p className=\"profile-name\">{meData.me.firstName + \" \" + meData.me.lastName}</p></NavLink></li>\n           } \n            <li>\n              <NavLink exact activeClassName=\"navlink-active\" to=\"/feed\">\n              <span className=\"menu-icons\">\n               <img src=\"/assets/icons/menu/feed-bg.svg\" alt=\"Feed\"/>\n              </span>\n              <p>Feed</p>\n              <div className=\"active-circle\"></div> </NavLink>\n            </li>\n            <li>\n              <NavLink exact activeClassName=\"navlink-active\" to=\"/discover\">\n              <span className=\"menu-icons\">\n               <img src=\"/assets/icons/menu/discover-bg.svg\" alt=\"Discover\"/>\n              </span>\n              <p>Discover</p>\n              <div className=\"active-circle\"></div> </NavLink>\n            </li>\n            <li>\n\n              <NavLink exact activeClassName=\"navlink-active\" to=\"/projects\">\n                <span className=\"menu-icons\">\n                  <img src=\"/assets/icons/menu/projects-bg.svg\" alt=\"Project\"/>\n                </span>\n                <p>Projects</p>\n              <div className=\"active-circle\"></div> </NavLink>\n            </li>\n            <li>\n              <NavLink exact activeClassName=\"navlink-active\" to=\"/mates\">\n              <span className=\"menu-icons\">\n                <img src=\"/assets/icons/menu/mates-bg.svg\" alt=\"Mates\"/>\n              </span>\n              <p>Mates</p>\n              <div className=\"active-circle\"></div> </NavLink>\n              </li>\n          </ul>\n  \n      </nav>\n      <nav className=\"menu-projects\">\n        <ul>\n          <li><p className=\"menu-projects-title\">Projects</p></li>\n          <li>\n            <button \n              className=\"menu-create-project\"\n              onClick={() => createProject()}\n              disabled={projectPanel === true}\n              >\n            <p>Create</p>\n            <img src=\"/assets/icons/plus/plus-white.svg\" alt=\"Create Project\"/></button></li>\n\n            { !loading && data && data.myProjects ? data.myProjects.map((project: any) => \n            <li key={project.id}><NavLink exact activeClassName=\"navlink-active\" to={`/workspace/${project.id}`}>{project.name}</NavLink></li>) : null}\n            \n        </ul>\n      </nav>\n  </div>\n  )\n}\n\nexport default connector(Navigation);\n","/Users/jay/Desktop/Current Projects/social-songs/web/src/components/mates/MatesComponent.tsx",[],"/Users/jay/Desktop/Current Projects/social-songs/web/src/redux/actions/posts/types.ts",[],"/Users/jay/Desktop/Current Projects/social-songs/web/src/routes/feed/Feed.tsx",["399"],"import React from 'react'\n\nimport FeedPosts from \"../../components/post/FeedPosts\";\nimport CreateComponent from \"../../components/create/CreateComponent\"\n\ninterface ComponentProps {\n}\n\nconst Feed = () => {\n    return (\n      <div className=\"component-container\">\n        <div className=\"feed-flex\">\n         <CreateComponent />\n          <FeedPosts />\n        </div>\n      </div> \n    );\n}\n\nexport default Feed;","/Users/jay/Desktop/Current Projects/social-songs/web/src/routes/profile/edit/NameDob.tsx",["400"],"import React, { useState } from \"react\"\n\nimport { useQuery, useMutation } from \"@apollo/client\";\nimport { MY_ACCOUNT } from \"../../../graphql/queries\";\nimport {UPDATE_NAMES_AND_DOB } from \"../../../graphql/mutations\";\n\n// Redux\nimport { connect, ConnectedProps } from \"react-redux\";\n\ninterface ComponentProps {  \n  }\n  \n  const mapState = (state: ComponentProps) => ({})\n  \n  const mapDispatch = {\n    editNames: (payload: boolean) => ({type: \"EDIT_NAME\", payload: payload}),\n  }\n  \n  const connector = connect(mapState,mapDispatch);\n  \n  type PropsFromRedux = ConnectedProps<typeof connector>;\n  type Props = PropsFromRedux\n\nconst NamesDob = ({editNames}: Props) => {\n  const [formErrors , setErrors] = useState({ firstName: \"\", lastName: \"\", dob:\"\"})\n  const [dobErrors, setDobErrors] = useState({\n    day: \"\",\n    month: \"\",\n    year: \"\",\n    all: \"\"\n})\n  const { data } = useQuery(MY_ACCOUNT);\n  const [UpdateNamesAndDob] = useMutation(UPDATE_NAMES_AND_DOB);    \n\n  \n const dobArray = data.me.dob.split(\" \");\n  var day = dobArray[0];\n  var month = dobArray[1];\n  var year = dobArray[2];\n\n\n  const [formData, setFormData] = useState({\n    firstName: data.me.firstName,\n    lastName :  data.me.lastName,\n    day : day,\n    month: month,\n    year: year\n  });\n\n\n  const onChange = (e:any) => {\n    setFormData({...formData, [e.target.name] : e.target.value})\n  }\n\n  const onSubmit = (e:React.FormEvent<HTMLFormElement>) => {\n    e.preventDefault()\n\n    var errors = {\n      firstName: \"\",\n      lastName: \"\",\n      dob: \"\"\n    }\n\n    if(formData.firstName === \"\") {\n      errors.firstName = \"First name can't be left empty\"\n    }\n    if(formData.lastName === \"\") {\n      errors.lastName = \"Last name can't be left empty\"\n    }\n    if(formData.day === \"\" || formData.month === \"\" || formData.year === \"\") {\n      errors.dob = \"Date of birth can't be left empty\"\n    }\n\n    if(errors.firstName === \"\" && errors.lastName === \"\" &&  errors.dob === \"\") {\n      const dob = formData.day + \" \" + formData.month + \" \" + formData.year;\n  \n      UpdateNamesAndDob({\n        variables : {\n          id: data.me.id,\n          firstName: formData.firstName,\n          lastName: formData.lastName,\n          dob\n        }\n      })\n      editNames(false);\n    } else { \n      setErrors(errors);\n    }\n  }\n\n  return (\n    <form onSubmit={(e) => onSubmit(e)} className=\"edit-form\">\n    <div className=\"name-email-wrapper\">\n        <span>\n            <label htmlFor=\"firstName\" className=\"label\">First Name</label>\n            <input \n              type=\"text\" \n              name=\"firstName\"\n              value={formData.firstName}\n              onChange={(e) => onChange(e)} />\n              { formErrors.firstName && <p className=\"input-error\">{formErrors.firstName}</p> }\n        </span>\n        <span>\n          <label htmlFor=\"lastName\"className=\"label\">Last Name</label>\n          <input \n              type=\"text\" \n              name=\"lastName\"\n              value={formData.lastName}\n              onChange={(e) => onChange(e)} />\n              { formErrors.lastName && <p className=\"input-error\">{formErrors.lastName}</p> }\n        </span>\n        <span className=\"email-container\">\n            <p className=\"label\">Email</p>\n            <p className=\"profile-info\">{data.me.email}</p> \n        </span>\n    </div>\n    <span>\n                        <span className=\"dob-wrapper\">\n                            <span className=\"dob-inputs day-wrapper\">\n                                <label htmlFor=\"day\">Day</label>\n                                <input \n                                    type=\"text\"\n                                    name=\"day\" \n                                    value={formData.day} \n                                    className=\"dob-input\"\n                                    id=\"day\"\n                                    placeholder=\"DD\"\n                                    maxLength={2}\n                                    style={  formErrors.dob ? {border: \"2px solid #F84061\"} : {border: \"none\"} }\n                                    onChange={e => onChange(e)}/>\n                            </span>\n                            <span className=\"dob-inputs month-wrapper\">\n                                <label htmlFor=\"month-edit\">Month</label>\n                                <select \n                                    name=\"month\" \n                                    id=\"month-edit\" \n                                    required\n                                    aria-invalid=\"true\"\n                                    style={  formErrors.dob || dobErrors.month !== \"\" ? {border: \"2px solid #F84061\"} : {border: \"none\"} }\n                                    onChange={e => onChange(e)} defaultValue={formData.month}>\n                                    <option selected disabled value=\"month\"> Month</option>\n                                  \n                                    <option value=\"January\">January</option>\n                                    <option value=\"February\">February</option>\n                                    <option value=\"March\">March</option>\n                                    <option value=\"April\">April</option>\n                                    <option value=\"May\">May</option>\n                                    <option value=\"June\">June</option>\n                                    <option value=\"July\">July</option>\n                                    <option value=\"August\">August</option>\n                                    <option value=\"September\">September</option>\n                                    <option value=\"October\">October</option>\n                                    <option value=\"November\">November</option>\n                                    <option value=\"December\">December</option>\n                                </select>\n                            </span>\n                                <span className=\"dob-inputs year-wrapper\">\n                                <label htmlFor=\"year\">Year</label>\n                                <input \n                                    type=\"text\" \n                                    name=\"year\" \n                                    value={formData.year} \n                                    className=\"dob-input\"\n                                    id=\"year\"\n                                    placeholder=\"YYYY\"\n                                    maxLength={4}\n                                    style={formErrors.dob ? {border: \"2px solid #F84061\"} : {border: \"none\"} }\n                                    onChange={e => onChange(e)}/>\n                            </span>\n                        </span>\n                        { formErrors.dob && <p className=\"input-error\">{formErrors.dob}</p> }\n                    </span>\n        <input type=\"submit\" value=\"Submit\"/>\n    <button type=\"button\" className=\"edit-profile\" onClick={() => editNames(false)}>\n            <img src=\"/assets/icons/plus/cross-red.svg\" alt=\"close\"/>\n    </button>\n    </form>   \n  )\n}\n\nexport default connector(NamesDob);","/Users/jay/Desktop/Current Projects/social-songs/web/src/routes/landing/Landing.tsx",[],"/Users/jay/Desktop/Current Projects/social-songs/web/src/components/notifications/Notifications.tsx",["401"],"import React, {useEffect, useState, Fragment} from 'react'\nimport { useLocation , Link, withRouter} from \"react-router-dom\";\n// GraphQL\nimport { useQuery, useMutation } from \"@apollo/client\";\nimport {GET_NOTIFICATIONS, GET_MY_MATES, MY_ACCOUNT} from \"../../graphql/queries\";\nimport { ADD_MATE , DELETE_NOTIFICATION} from \"../../graphql/mutations\";\n// Redux\nimport {connect, ConnectedProps} from \"react-redux\";\n\n\ninterface ComponentProps {\n  application: {\n    notificationPanel : boolean\n  }\n}\n\nconst mapStateToProps = (state: ComponentProps) => ({\n  notificationPanel: state.application.notificationPanel\n})\n\nconst mapDispatch = {\n  toggleNotifications : (payload: boolean) => ({ type: \"TOGGLE__NOTIFICATIONS\", payload: payload }),\n}\n\nconst connector = connect(mapStateToProps, mapDispatch);\n\ntype PropsFromRedux = ConnectedProps<typeof connector>\n\ntype Props = PropsFromRedux & {\n  history: any\n}\n\nconst Notifications = ({toggleNotifications, notificationPanel, history} : Props) => {\n  const [oldLocation , setLocation] = useState(\"\")\n  const { loading, data } = useQuery(GET_NOTIFICATIONS);\n  const { loading: meLoading, data: meData } = useQuery(MY_ACCOUNT);\n\n  const [addMate] = useMutation(ADD_MATE);\n  const [deleteNotification] = useMutation(DELETE_NOTIFICATION);\n\n  var location = useLocation();\n  var pathName = location.pathname\n\n useEffect(() => {\n    if(oldLocation !== \"\" &&  pathName !== oldLocation) {\n      toggleNotifications(false)\n      setLocation(pathName)\n    } else {\n      setLocation(pathName)\n    }\n  }, [pathName, oldLocation, toggleNotifications])\n\n\n  if(!loading && data){\n    console.log(data);\n  }\n  const acceptMateRequest = async (userId: number , notificationId: number) => {\n    console.log(userId);\n    await addMate({\n      variables: {\n        mateId: userId\n      },\n      update: (cache, { data: { addMate } }) => {\n        cache.writeQuery({\n          query: GET_MY_MATES, \n          variables : {\n          userId: meData.me.id\n          }, \n          data: {\n            getMates: addMate\n          } \n      })\n      }\n    })\n    try{\n        await deleteNotification({\n        variables: {\n          id: notificationId \n        },\n        update: (cache , {data: {deleteNotification} }) => {\n          cache.writeQuery({\n            query: GET_NOTIFICATIONS,\n            data : {\n              notifications: deleteNotification\n            }\n          })\n        }\n      }).then(() => {\n          // Close notifications with redux\n      })\n      .catch(err => console.log(err))\n      \n    }catch(err) {\n      console.log(err);\n    }\n    \n  }\n\n  const declineRequest = async (notificationId: number) => {\n    await deleteNotification({\n      variables: {\n        id: notificationId \n      },\n      update: (cache , {data: {deleteNotification} }) => {\n        cache.writeQuery({\n          query: GET_NOTIFICATIONS,\n          data : {\n            notifications: deleteNotification\n          }\n        })\n      }\n    })\n  }\n  const takeToProject = async (notificationId: number, projectId: string) => {\n      history.push(`/workspace/${projectId}`)\n      await deleteNotification({\n        variables: {\n          id: notificationId \n        },\n        update: (cache , {data: {deleteNotification} }) => {\n          cache.writeQuery({\n            query: GET_NOTIFICATIONS,\n            data : {\n              notifications: deleteNotification\n            }\n          })\n        }\n      })\n  }\n      return (\n          <div className=\"notifications-container\">\n            <h3>Notifications</h3>\n            <ul>\n              {!loading && data && data.notifications && data.notifications.map((notification: any) => \n               <li key={notification.id} > \n                <div className=\"list-top\">\n                <Link to={`/profile/${notification.senderId}`}>\n                  <img src={notification.avatar} alt=\"User Avatar\"/>\n                </Link>\n              \n                  <Fragment>\n                   <p className=\"name\">\n                     <Link to={`/profile/${notification.senderId}`}>{notification.senderName}</Link> {notification.message.split(\"/\")[0]}</p>\n                  </Fragment>\n             \n                </div>\n                { notification.type === \"request\" &&  \n                    <div className=\"li-btns\">\n                      <button className=\"accept-btn\" onClick={() => acceptMateRequest(notification.senderId, notification.id)}>Accept</button>\n                      <button className=\"decline-btn\" onClick={() => declineRequest(notification.id)}>Decline</button>\n                    </div>\n                 }\n                 {\n                   notification.type === \"contributor\" && \n                    <div className=\"li-btns\">\n                      <button onClick={() => takeToProject(notification.id, notification.message.split(\"/\")[1])}>See project</button>\n                      <button className=\"decline-btn\" onClick={() => declineRequest(notification.id)}>Delete</button>\n                    </div>\n                 }\n              </li>)}\n              {!loading && data && data.notifications.length < 1 && <li>You have no notifcations.</li> }\n            </ul>\n          </div>\n      )}\n\nexport default withRouter(connector(Notifications));\n","/Users/jay/Desktop/Current Projects/social-songs/web/src/components/project/contributors/RemoveContributor.tsx",[],"/Users/jay/Desktop/Current Projects/social-songs/web/src/components/project/components/SearchProjects.tsx",[],"/Users/jay/Desktop/Current Projects/social-songs/web/src/components/project/components/Options.tsx",[],"/Users/jay/Desktop/Current Projects/social-songs/web/src/components/project/functions/CreateProject.tsx",[],"/Users/jay/Desktop/Current Projects/social-songs/web/src/components/project/projects/MyProjects.tsx",["402","403"],"import React, { Fragment, useState, useEffect } from 'react'\nimport { Link, withRouter } from \"react-router-dom\";\n// GraphQL\nimport { useQuery, useMutation } from \"@apollo/client\";\nimport { MY_PROJECTS, MY_POSTS, FEED_POSTS, MY_ACCOUNT } from \"../../../graphql/queries\";\nimport { SHARE_PROJECT } from \"../../../graphql/mutations\"\n// Redux\nimport { connect, ConnectedProps } from \"react-redux\";\n// Components\n// import DeleteProject from \"../functions/DeleteProject\";\nimport ContributorPanel from \"../contributors/ContributorPanel\"\nimport ContributorAvatar from \"../contributors/ContributorAvatar\";\nimport FormatTimestamp from \"../../formatTime/FormatTimestamp\";\nimport Options from \"../components/Options\";\nimport ResultComponent from \"../components/ResultComponent\";\n\ninterface ComponentProps {\n  application : { \n    contributorsPanel: boolean\n  }\n  project : {\n    deleteProject: boolean\n    selectedProject: string\n    options: string\n    result: {\n      toggle: boolean,\n      type: string,\n      currentId: string\n    }\n  }\n}\n\nconst mapState = (state: ComponentProps) => ({\n  deleteProject: state.project.deleteProject,\n  selectedProject : state.project.selectedProject,\n  options: state.project.options,\n  contributorsPanel: state.application.contributorsPanel,\n  result: state.project.result\n})\n\ntype resultData =  {\n  toggle: boolean\n  type: string\n  selectedId: string\n}\n\nconst mapDispatch = {\n  activatePlaybar : (payload: boolean) => ({ type: \"OPEN_PLAYBAR\", payload: payload }),\n  assignTrack : (payload: object) => ({type: \"ASSIGN_TRACK\", payload: payload}),\n  setDeleteProjectPanel: (payload: boolean) => ({ type: \"SHOW_PROJECT_DELETE_PANEL\", payload: payload }),\n  setSelectedProject: (id: string) => ({ type: \"SELECTED_PROJECT_ID\", payload: id}),\n  toggleContributors : (payload: boolean) => ({type: \"TOGGLE__CONTRIBUTORS\", payload: payload}),\n  intialiseProject: (bool: boolean ) => ({type: \"INIT_PROJECT\", payload: bool }),\n  toggleOptions: (projectId: string) => ({type: \"PROJECT_OPTIONS\", payload: projectId}),\n  toggleProjectResult: (payload: resultData) => ({type: \"PROJECT_RESULT\", payload}) \n}\n\nconst connector = connect(mapState, mapDispatch);\ntype PropsFromRedux = ConnectedProps<typeof connector>\ntype Props = PropsFromRedux &  {\n  history: any\n};\n\nconst MyProjects = ({ selectedProject, deleteProject, history, contributorsPanel, options,result, setDeleteProjectPanel, setSelectedProject, activatePlaybar,toggleContributors, intialiseProject, assignTrack, toggleOptions , toggleProjectResult }:Props) => {\n  const [idForContributor, setIdForContributor] = useState(\"\");\n  const [shareProject] = useMutation(SHARE_PROJECT);\n  const { data, loading } = useQuery(MY_PROJECTS);\n  const { data: meData, loading: meLoading } = useQuery(MY_ACCOUNT);\n\n  useEffect(() => {\n    return () => {\n      setSelectedProject(\"\");\n      setDeleteProjectPanel(false);\n    }\n  }, [setSelectedProject, setDeleteProjectPanel])\n  if(loading) {\n    return <div>Loading...</div>\n  }\n\n  const toggleDeletePopUp = (id: string) => {\n    setSelectedProject(id);\n    setDeleteProjectPanel(true);\n  }\n\n  const openPlaybarAndAssignTrackId = (trackId: string, projectId: string, projectName: string) => {\n    activatePlaybar(true);\n    const dataObject = {\n      id: trackId,\n      projectId,\n      trackName: \"\"\n    }\n    assignTrack(dataObject)\n  }\n  const addContributorFunc = (projectId: string) => {\n    if(idForContributor === projectId) {\n      if(contributorsPanel === false) {\n        toggleContributors(true)\n        setIdForContributor(projectId)\n      } else {\n        toggleContributors(false)\n        setIdForContributor(\"\")\n      } \n    } else {\n      setIdForContributor(projectId)\n      toggleContributors(true)\n    }\n  }\n\n  const shareProjectFunction = async (projectId: string) => {\n   const response = await shareProject({\n      variables: {\n        projectId\n      },\n      update: (cache, { data: { shareProject } }) => {\n        // Read the MY_PROJECTS query cache\n       const projectCache: any = cache.readQuery({query: MY_PROJECTS})\n       // Assign and iterate the cache so we can modify the Array\n       let modifyCache = [...projectCache.myProjects];\n       let index: number;\n       // Loop the project cache array\n       for(let x = 0; x < modifyCache.length; x++) {\n         // Find the post that matches our newly shared post with their ids\n        if(shareProject.post.id === modifyCache[x]) {\n          // Get the index of the matching project\n          index = modifyCache.indexOf(modifyCache[x])\n        }\n       }\n        // Remove the matching project by its index and then replace our new updated post\n        modifyCache.splice(index!, 1, shareProject.post)\n        cache.writeQuery({ \n          query : MY_PROJECTS,\n          data:  {\n           myProjects: modifyCache\n         }\n       })\n       // Getting profile post cache\n       const postCache: any = cache.readQuery({query: MY_POSTS})\n       // Iterate cache and add the shareProject\n       if(postCache !== null) {\n       let modifyPostCache = [...postCache.myPosts, shareProject ];\n       // Update cache\n        cache.writeQuery({ \n          query : MY_POSTS,\n          data:  {\n           myPosts: modifyPostCache\n         }\n       })\n      }\n        // Getting feed post cache\n       const feedCache: any = cache.readQuery({query: FEED_POSTS})\n       if(feedCache !== null) {\n        // Iterate cache and add the shareProject\n       let modifyFeedCache = [...feedCache.myFeed, shareProject ];\n        // Update cache\n        cache.writeQuery({ \n          query : FEED_POSTS,\n          data:  {\n            myFeed: modifyFeedCache\n         }\n       })\n      }\n\n      }\n    })\n    try {\n      console.log(response)\n      if(response.data.shareProject.success) {\n        setSelectedProject(projectId)\n\n        const result = {\n          toggle: true,\n          type: \"share\",\n          selectedId: projectId\n        }\n        toggleProjectResult(result)\n\n      }\n\n    } catch(err) {\n      console.log(err);\n    }\n  }\n\n  const toggleProjectPanel = () => {\n    intialiseProject(true);\n  }\n\n  const toggleOptionsMenu = (id: string) => {\n    if(options === \"\") {\n      toggleOptions(id)\n    } else {\n      toggleOptions(\"\")\n    }\n  }\n\n\n    return (\n     <Fragment>\n      {!loading && data && data.myProjects.length !== 0  ?\n      data.myProjects.map((project: any) => \n        <li className=\"project\" key={project.id}>\n            <span className=\"top\">\n              <span className=\"project-details\">\n                <span>\n                <Link to={`/workspace/${project.id}`} className=\"project-name\">{project.name}</Link>\n                { !meLoading && meData && meData.me.id !== project.creatorId &&\n                   <Link to={`/profile/${project.creatorId}`} className=\"project-creator\"> by <em>{project.creatorName}</em></Link>\n                }\n                </span>\n                <FormatTimestamp timestamp={project.created} />\n              </span>\n              <span className=\"responsive-btns\">\n                <button className=\"post-buttons responsive-play\"  onClick={() => openPlaybarAndAssignTrackId(project.mainTrack, project.id, project.name)}>\n                  <img src=\"/assets/icons/post/play-blue.svg\" alt=\"Play\"/>\n                </button>\n                { project.postId === null &&  \n                  <button className=\"post-buttons responsive-share\" onClick={() => shareProjectFunction(project.id)}>\n                    <img src=\"/assets/icons/post/share.svg\" alt=\"Share post\"/>\n                 </button>\n                }\n                <button className=\"post-buttons\" onClick={() => toggleOptionsMenu(project.id)}>\n                  <img src=\"/assets/icons/post/options.svg\" alt=\"Project options\"/>\n                </button>\n              </span>\n            </span>\n            <div className=\"bottom\">\n            {project.isPublic === true ? \n              <p className=\"public\">Public</p> :\n              <p className=\"private\">Private</p>\n            }\n              <span className=\"contributors\">\n                {/* <button onClick={() => addContributorFunc(project.id)}>Contributors</button> */}\n                <ContributorAvatar projectId={project.id} />\n              </span>  \n            </div>\n        </li> \n       ) : \n       \n       <div className=\"no-posts\">\n       <p>You have no projects yet.</p>\n         <button onClick={() => toggleProjectPanel()}>  Why not create a new project? \n         </button>\n     </div> }\n     {contributorsPanel === true && <ContributorPanel />}\n    { options !== \"\" && <Options/>}\n    { result.toggle && <ResultComponent /> }\n    </Fragment>\n    );\n} \n\nexport default withRouter(connector(MyProjects));\n\n","/Users/jay/Desktop/Current Projects/social-songs/web/src/components/project/components/ResultComponent.tsx",[],"/Users/jay/Desktop/Current Projects/social-songs/web/src/components/project/contributors/ContributorPanel.tsx",[],"/Users/jay/Desktop/Current Projects/social-songs/web/src/components/project/components/ProjectsHeader.tsx",["404","405","406","407"],"import React, { useRef , useState, Fragment} from 'react'\nimport { useQuery } from \"@apollo/client\";\nimport { MY_ACCOUNT, SEARCH_PROJECTS } from \"../../../graphql/queries\";\n// Redux \nimport { connect, ConnectedProps } from \"react-redux\";\n// Components \nimport SearchProjects from \"./SearchProjects\";\n\ninterface ComponentProps {\n application : {\n   projectPanel: boolean\n }\n}\n\nconst mapState = (state: ComponentProps) => ({\n  projectPanel: state.application.projectPanel\n})\n\nconst mapDispatch = {\n  intialiseProject: (bool: boolean ) => ({type: \"INIT_PROJECT\", payload: bool }),\n}\n\nconst connector = connect(mapState, mapDispatch)\n\ntype PropsFromRedux = ConnectedProps<typeof connector>;\ntype Props = PropsFromRedux;\nconst ProjectsHeader = ({projectPanel, intialiseProject} : Props) => {\n  const [searchData, setSearchData] = useState({\n    search: \"\"\n  })\n  const { data, loading } = useQuery(MY_ACCOUNT);\n  const searchInput = useRef<HTMLInputElement>(null); \n  const { data: projectData, loading: projectLoading } = useQuery(SEARCH_PROJECTS , \n    {variables : {\n    projectName : searchData.search\n  }});\n\n  const toggleProjectPanel = () => {\n    if(projectPanel === true) {\n      intialiseProject(false)\n    } else {\n      intialiseProject(true)\n    }\n  }\n\n  const onChange = (e:React.ChangeEvent<HTMLInputElement>) => {\n    setSearchData({...searchData , search: e.target.value})\n  } \n\n  const onSubmit = (e:React.FormEvent<HTMLFormElement>) => {\n    e.preventDefault();\n    console.log(e.target);\n  }\n\n  const focusInput = () => {\n    if(searchInput && searchInput.current) {\n      searchInput.current.focus()\n    }\n  }\n  return (\n    <Fragment>\n    <div className=\"projects-header\">\n      <form onSubmit={(e) => onSubmit(e)}>\n        <span className=\"input-wrapper\">\n      { searchData.search !== \"\"  ?\n          <button className=\"clear-btn\" onClick={() => setSearchData({search: \"\"})}>\n            <img src=\"/assets/icons/menu/clear.svg\" alt=\"Clear search\"/>\n          </button>\n          :\n          <button className=\"focus-btn\" onClick={() => focusInput()}>\n            <img src=\"/assets/icons/menu/search-blue.svg\" alt=\"Search\"/>\n          </button>\n        }\n        <input \n          type=\"text\"\n          id=\"search\"\n          name=\"search\"\n          value={searchData.search}\n          placeholder=\"Search projects\"\n          onChange={(e) => onChange(e)}\n          ref={searchInput}\n          />\n          </span>\n      </form>\n          <div className=\"right\">\n            <button onClick={() => toggleProjectPanel()}> \n              <img src=\"/assets/icons/create/project-create.svg\" alt=\"Create Project\" />\n              <p>Create Project</p>\n            </button>\n          </div>\n    </div>\n    { searchData.search !== \"\"  &&  <SearchProjects searchInput={searchData.search}/> }\n    </Fragment>\n  )\n}\nexport default connector(ProjectsHeader);","/Users/jay/Desktop/Current Projects/social-songs/web/src/components/project/contributors/ContributorAvatar.tsx",[],"/Users/jay/Desktop/Current Projects/social-songs/web/src/components/header/CreateOptions.tsx",[],{"ruleId":"408","severity":1,"message":"409","line":1,"column":10,"nodeType":"410","messageId":"411","endLine":1,"endColumn":23},{"ruleId":"408","severity":1,"message":"412","line":5,"column":24,"nodeType":"410","messageId":"411","endLine":5,"endColumn":33},{"ruleId":"413","replacedBy":"414"},{"ruleId":"415","replacedBy":"416"},{"ruleId":"413","replacedBy":"417"},{"ruleId":"415","replacedBy":"418"},{"ruleId":"408","severity":1,"message":"419","line":9,"column":11,"nodeType":"410","messageId":"411","endLine":9,"endColumn":21},{"ruleId":"413","replacedBy":"420"},{"ruleId":"415","replacedBy":"421"},{"ruleId":"408","severity":1,"message":"419","line":3,"column":11,"nodeType":"410","messageId":"411","endLine":3,"endColumn":21},{"ruleId":"408","severity":1,"message":"422","line":12,"column":10,"nodeType":"410","messageId":"411","endLine":12,"endColumn":16},{"ruleId":"408","severity":1,"message":"423","line":12,"column":18,"nodeType":"410","messageId":"411","endLine":12,"endColumn":27},{"ruleId":"408","severity":1,"message":"424","line":13,"column":10,"nodeType":"410","messageId":"411","endLine":13,"endColumn":24},{"ruleId":"408","severity":1,"message":"425","line":13,"column":26,"nodeType":"410","messageId":"411","endLine":13,"endColumn":39},{"ruleId":"413","replacedBy":"426"},{"ruleId":"415","replacedBy":"427"},{"ruleId":"408","severity":1,"message":"428","line":36,"column":10,"nodeType":"410","messageId":"411","endLine":36,"endColumn":23},{"ruleId":"408","severity":1,"message":"429","line":38,"column":10,"nodeType":"410","messageId":"411","endLine":38,"endColumn":26},{"ruleId":"413","replacedBy":"430"},{"ruleId":"415","replacedBy":"431"},{"ruleId":"408","severity":1,"message":"432","line":1,"column":17,"nodeType":"410","messageId":"411","endLine":1,"endColumn":26},{"ruleId":"408","severity":1,"message":"433","line":1,"column":29,"nodeType":"410","messageId":"411","endLine":1,"endColumn":37},{"ruleId":"408","severity":1,"message":"434","line":2,"column":10,"nodeType":"410","messageId":"411","endLine":2,"endColumn":14},{"ruleId":"408","severity":1,"message":"435","line":2,"column":16,"nodeType":"410","messageId":"411","endLine":2,"endColumn":27},{"ruleId":"408","severity":1,"message":"436","line":3,"column":10,"nodeType":"410","messageId":"411","endLine":3,"endColumn":18},{"ruleId":"408","severity":1,"message":"437","line":4,"column":10,"nodeType":"410","messageId":"411","endLine":4,"endColumn":20},{"ruleId":"408","severity":1,"message":"438","line":1,"column":18,"nodeType":"410","messageId":"411","endLine":1,"endColumn":26},{"ruleId":"408","severity":1,"message":"433","line":1,"column":28,"nodeType":"410","messageId":"411","endLine":1,"endColumn":36},{"ruleId":"439","severity":1,"message":"440","line":53,"column":5,"nodeType":"441","endLine":53,"endColumn":7,"suggestions":"442"},{"ruleId":"408","severity":1,"message":"443","line":108,"column":9,"nodeType":"410","messageId":"411","endLine":108,"endColumn":36},{"ruleId":"408","severity":1,"message":"444","line":45,"column":17,"nodeType":"410","messageId":"411","endLine":45,"endColumn":23},{"ruleId":"408","severity":1,"message":"445","line":45,"column":34,"nodeType":"410","messageId":"411","endLine":45,"endColumn":43},{"ruleId":"439","severity":1,"message":"440","line":52,"column":5,"nodeType":"441","endLine":52,"endColumn":7,"suggestions":"446"},{"ruleId":"408","severity":1,"message":"443","line":70,"column":7,"nodeType":"410","messageId":"411","endLine":70,"endColumn":34},{"ruleId":"408","severity":1,"message":"433","line":1,"column":17,"nodeType":"410","messageId":"411","endLine":1,"endColumn":25},{"ruleId":"408","severity":1,"message":"447","line":3,"column":10,"nodeType":"410","messageId":"411","endLine":3,"endColumn":21},{"ruleId":"408","severity":1,"message":"448","line":8,"column":5,"nodeType":"410","messageId":"411","endLine":8,"endColumn":11},{"ruleId":"408","severity":1,"message":"449","line":9,"column":5,"nodeType":"410","messageId":"411","endLine":9,"endColumn":11},{"ruleId":"408","severity":1,"message":"450","line":11,"column":7,"nodeType":"410","messageId":"411","endLine":11,"endColumn":18},{"ruleId":"408","severity":1,"message":"451","line":32,"column":5,"nodeType":"410","messageId":"411","endLine":32,"endColumn":20},{"ruleId":"408","severity":1,"message":"452","line":35,"column":10,"nodeType":"410","messageId":"411","endLine":35,"endColumn":19},{"ruleId":"408","severity":1,"message":"453","line":35,"column":21,"nodeType":"410","messageId":"411","endLine":35,"endColumn":33},{"ruleId":"408","severity":1,"message":"454","line":38,"column":10,"nodeType":"410","messageId":"411","endLine":38,"endColumn":18},{"ruleId":"408","severity":1,"message":"455","line":38,"column":20,"nodeType":"410","messageId":"411","endLine":38,"endColumn":27},{"ruleId":"408","severity":1,"message":"456","line":39,"column":10,"nodeType":"410","messageId":"411","endLine":39,"endColumn":21},{"ruleId":"408","severity":1,"message":"457","line":39,"column":23,"nodeType":"410","messageId":"411","endLine":39,"endColumn":34},{"ruleId":"408","severity":1,"message":"458","line":40,"column":18,"nodeType":"410","messageId":"411","endLine":40,"endColumn":27},{"ruleId":"408","severity":1,"message":"459","line":46,"column":20,"nodeType":"410","messageId":"411","endLine":46,"endColumn":31},{"ruleId":"408","severity":1,"message":"460","line":47,"column":10,"nodeType":"410","messageId":"411","endLine":47,"endColumn":17},{"ruleId":"408","severity":1,"message":"432","line":1,"column":28,"nodeType":"410","messageId":"411","endLine":1,"endColumn":37},{"ruleId":"408","severity":1,"message":"461","line":48,"column":9,"nodeType":"410","messageId":"411","endLine":48,"endColumn":23},{"ruleId":"408","severity":1,"message":"433","line":1,"column":18,"nodeType":"410","messageId":"411","endLine":1,"endColumn":26},{"ruleId":"408","severity":1,"message":"432","line":1,"column":28,"nodeType":"410","messageId":"411","endLine":1,"endColumn":37},{"ruleId":"439","severity":1,"message":"462","line":12,"column":8,"nodeType":"441","endLine":12,"endColumn":10,"suggestions":"463"},{"ruleId":"408","severity":1,"message":"464","line":43,"column":21,"nodeType":"410","messageId":"411","endLine":43,"endColumn":33},{"ruleId":"408","severity":1,"message":"435","line":2,"column":61,"nodeType":"410","messageId":"411","endLine":2,"endColumn":72},{"ruleId":"408","severity":1,"message":"465","line":20,"column":8,"nodeType":"410","messageId":"411","endLine":20,"endColumn":17},{"ruleId":"408","severity":1,"message":"466","line":5,"column":11,"nodeType":"410","messageId":"411","endLine":5,"endColumn":25},{"ruleId":"413","replacedBy":"467"},{"ruleId":"415","replacedBy":"468"},{"ruleId":"408","severity":1,"message":"466","line":9,"column":11,"nodeType":"410","messageId":"411","endLine":9,"endColumn":25},{"ruleId":"439","severity":1,"message":"469","line":50,"column":6,"nodeType":"441","endLine":50,"endColumn":31,"suggestions":"470"},{"ruleId":"439","severity":1,"message":"440","line":55,"column":5,"nodeType":"441","endLine":55,"endColumn":7,"suggestions":"471"},{"ruleId":"408","severity":1,"message":"472","line":28,"column":11,"nodeType":"410","messageId":"411","endLine":28,"endColumn":21},{"ruleId":"408","severity":1,"message":"473","line":28,"column":23,"nodeType":"410","messageId":"411","endLine":28,"endColumn":36},{"ruleId":"408","severity":1,"message":"466","line":6,"column":11,"nodeType":"410","messageId":"411","endLine":6,"endColumn":25},{"ruleId":"408","severity":1,"message":"474","line":26,"column":21,"nodeType":"410","messageId":"411","endLine":26,"endColumn":33},{"ruleId":"408","severity":1,"message":"445","line":36,"column":20,"nodeType":"410","messageId":"411","endLine":36,"endColumn":29},{"ruleId":"408","severity":1,"message":"475","line":80,"column":9,"nodeType":"410","messageId":"411","endLine":80,"endColumn":26},{"ruleId":"408","severity":1,"message":"476","line":94,"column":9,"nodeType":"410","messageId":"411","endLine":94,"endColumn":27},{"ruleId":"408","severity":1,"message":"477","line":31,"column":11,"nodeType":"410","messageId":"411","endLine":31,"endColumn":15},{"ruleId":"408","severity":1,"message":"478","line":31,"column":17,"nodeType":"410","messageId":"411","endLine":31,"endColumn":24},{"ruleId":"408","severity":1,"message":"479","line":33,"column":17,"nodeType":"410","messageId":"411","endLine":33,"endColumn":28},{"ruleId":"408","severity":1,"message":"480","line":33,"column":39,"nodeType":"410","messageId":"411","endLine":33,"endColumn":53},"@typescript-eslint/no-unused-vars","'createElement' is defined but never used.","Identifier","unusedVar","'RootState' is defined but never used.","no-native-reassign",["481"],"no-negated-in-lhs",["482"],["481"],["482"],"'RouteState' is defined but never used.",["481"],["482"],"'mateId' is assigned a value but never used.","'setMateId' is assigned a value but never used.","'validateRemove' is assigned a value but never used.","'setValidation' is assigned a value but never used.",["481"],["482"],"'trackDuration' is assigned a value but never used.","'currentProjectId' is assigned a value but never used.",["481"],["482"],"'useEffect' is defined but never used.","'useState' is defined but never used.","'Link' is defined but never used.","'useLocation' is defined but never used.","'useQuery' is defined but never used.","'MY_ACCOUNT' is defined but never used.","'Fragment' is defined but never used.","react-hooks/exhaustive-deps","React Hook useEffect has missing dependencies: 'setPostId' and 'validatePostDelete'. Either include them or remove the dependency array. If 'validatePostDelete' changes too often, find the parent component that defines it and wrap that definition in useCallback.","ArrayExpression",["483"],"'openPlaybarAndAssignTrackId' is assigned a value but never used.","'meData' is assigned a value but never used.","'meLoading' is assigned a value but never used.",["484"],"'useMutation' is defined but never used.","'ab2str' is assigned a value but never used.","'str2ab' is assigned a value but never used.","'MicRecorder' is assigned a value but never used.","'counter' is defined but never used.","'trackForm' is assigned a value but never used.","'setTrackForm' is assigned a value but never used.","'initForm' is assigned a value but never used.","'setForm' is assigned a value but never used.","'audioBuffer' is assigned a value but never used.","'storeBuffer' is assigned a value but never used.","'setTracks' is assigned a value but never used.","'setIsActive' is assigned a value but never used.","'minutes' is assigned a value but never used.","'createTabPanel' is assigned a value but never used.","React Hook useEffect has a missing dependency: 'formatTimestamp'. Either include it or remove the dependency array.",["485"],"'setRecording' is assigned a value but never used.","'AuthRoute' is defined but never used.","'ComponentProps' is defined but never used.",["481"],["482"],"React Hook useEffect has a missing dependency: 'toggleSearch'. Either include it or remove the dependency array. If 'toggleSearch' changes too often, find the parent component that defines it and wrap that definition in useCallback.",["486"],["487"],"'activeLink' is assigned a value but never used.","'setActiveLink' is assigned a value but never used.","'setDobErrors' is assigned a value but never used.","'toggleDeletePopUp' is assigned a value but never used.","'addContributorFunc' is assigned a value but never used.","'data' is assigned a value but never used.","'loading' is assigned a value but never used.","'projectData' is assigned a value but never used.","'projectLoading' is assigned a value but never used.","no-global-assign","no-unsafe-negation",{"desc":"488","fix":"489"},{"desc":"488","fix":"490"},{"desc":"491","fix":"492"},{"desc":"493","fix":"494"},{"desc":"488","fix":"495"},"Update the dependencies array to be: [setPostId, validatePostDelete]",{"range":"496","text":"497"},{"range":"498","text":"497"},"Update the dependencies array to be: [formatTimestamp]",{"range":"499","text":"500"},"Update the dependencies array to be: [location, routeLocation, toggleSearch]",{"range":"501","text":"502"},{"range":"503","text":"497"},[1613,1615],"[setPostId, validatePostDelete]",[1595,1597],[274,276],"[formatTimestamp]",[1338,1363],"[location, routeLocation, toggleSearch]",[1811,1813]]